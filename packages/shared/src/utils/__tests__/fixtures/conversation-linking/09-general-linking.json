{
  "description": "General conversation linking - assistant response followed by user question",
  "type": "standard",
  "expectedLink": true,
  "expectedBranchId": "main",
  "parent": {
    "request_id": "8705f3ad-a4ee-4e2f-ba21-0d51d0c6077a",
    "domain": "test.example.com",
    "conversation_id": "cad9288f-e9b8-4b37-b00f-ccf3de69ca8e",
    "branch_id": "main",
    "current_message_hash": "94f3b1ebe11bef07b142b59b82c651b5ae3716d7158c0085523890c7e99645a8",
    "parent_message_hash": "c87f53bb929f15812447db82cbf0307cac78f08fc2e8321f24fbef21716bfa0c",
    "system_hash": "2dcb2535ac0cef2544b16f268b107a8da8618a6f3938a865d96b1a2ffcb8cfb4",
    "body": {
      "model": "claude-3-opus-20240229",
      "stream": true,
      "system": "You are Claude, a helpful AI assistant.",
      "messages": [
        {
          "role": "user",
          "content": "What is TypeScript?"
        },
        {
          "role": "assistant",
          "content": "TypeScript is a programming language developed by Microsoft that builds on JavaScript by adding static type definitions. Here are the key points:\n\n1. **Superset of JavaScript**: All valid JavaScript code is also valid TypeScript code\n2. **Static Typing**: Add type annotations to variables, functions, and objects\n3. **Compile-time Error Checking**: Catches errors before runtime\n4. **Modern Features**: Supports latest ECMAScript features\n5. **Better IDE Support**: Enhanced autocomplete and refactoring\n\nTypeScript compiles down to plain JavaScript, making it compatible with any browser or JavaScript runtime."
        },
        {
          "role": "user",
          "content": "Can you show me a simple example?"
        }
      ]
    },
    "response_body": {
      "id": "msg_01EotHzS6R8jPg3shGcpJcCF",
      "role": "assistant",
      "type": "message",
      "model": "claude-3-opus-20240229",
      "content": [
        {
          "text": "Here's a simple TypeScript example:\n\n```typescript\n// Define an interface\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\n// Function with type annotations\nfunction greetUser(user: User): string {\n  return `Hello, ${user.name}!`;\n}\n\n// Create a user object\nconst user: User = {\n  id: 1,\n  name: \"Alice\",\n  email: \"alice@example.com\"\n};\n\n// Use the function\nconsole.log(greetUser(user)); // Output: Hello, Alice!\n```\n\nThis example shows:\n- Interface definition for structured data\n- Type annotations for function parameters and return values\n- Type checking ensures the correct data structure",
          "type": "text"
        }
      ]
    }
  },
  "child": {
    "request_id": "3412bdc6-c2dc-4d4f-8541-ee2ab4db268a",
    "domain": "test.example.com",
    "body": {
      "model": "claude-3-opus-20240229",
      "stream": true,
      "system": "You are Claude, a helpful AI assistant.",
      "messages": [
        {
          "role": "user",
          "content": "What is TypeScript?"
        },
        {
          "role": "assistant",
          "content": "TypeScript is a programming language developed by Microsoft that builds on JavaScript by adding static type definitions. Here are the key points:\n\n1. **Superset of JavaScript**: All valid JavaScript code is also valid TypeScript code\n2. **Static Typing**: Add type annotations to variables, functions, and objects\n3. **Compile-time Error Checking**: Catches errors before runtime\n4. **Modern Features**: Supports latest ECMAScript features\n5. **Better IDE Support**: Enhanced autocomplete and refactoring\n\nTypeScript compiles down to plain JavaScript, making it compatible with any browser or JavaScript runtime."
        },
        {
          "role": "user",
          "content": "Can you show me a simple example?"
        },
        {
          "role": "assistant",
          "content": "Here's a simple TypeScript example:\n\n```typescript\n// Define an interface\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\n// Function with type annotations\nfunction greetUser(user: User): string {\n  return `Hello, ${user.name}!`;\n}\n\n// Create a user object\nconst user: User = {\n  id: 1,\n  name: \"Alice\",\n  email: \"alice@example.com\"\n};\n\n// Use the function\nconsole.log(greetUser(user)); // Output: Hello, Alice!\n```\n\nThis example shows:\n- Interface definition for structured data\n- Type annotations for function parameters and return values\n- Type checking ensures the correct data structure"
        },
        {
          "role": "user",
          "content": "What about generics?"
        }
      ]
    }
  }
}
