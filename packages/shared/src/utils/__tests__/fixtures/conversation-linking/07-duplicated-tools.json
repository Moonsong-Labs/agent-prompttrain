{
  "description": "Test that conversations don't link when parent has only 1 message but child expects 2-message parent",
  "type": "standard",
  "expectedLink": true,
  "existingChild": true,
  "parent": {
    "request_id": "9484fa42-2685-4e2a-9198-79a88ae2199e",
    "domain": "claude-reviews.msldev.io",
    "conversation_id": "17f4b4ec-f6bd-4569-998f-82ee7459b96a",
    "branch_id": "main",
    "current_message_hash": "bbc88051deafd9371e540c1bde261e128518a3beb3809a2c6a40151e5832bf51",
    "parent_message_hash": null,
    "system_hash": "2570438b243f1c63933a776322342203383f5536bff20e66181bc1108ad34036",
    "body": {
      "model": "claude-opus-4-20250514",
      "stream": true,
      "system": [
        {
          "text": "You are Claude Code, Anthropic's official CLI for Claude.",
          "type": "text",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools).\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point. When you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface. You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail. Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n1. Doing the right thing when asked, including taking actions and follow-up actions\n2. Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n3. Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite and TodoRead tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nfalse\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /storage-hub\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.10.14-linuxkit\nToday's date: 2025-06-30\n</env>\nYou are powered by the model named Opus 4. The exact model ID is claude-opus-4-20250514.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: sdk-upgrade-polkadot-stable2409\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\n?? .claude/\n\nRecent commits:\n2a5b783 base files for testing\n85e28c8 feat: ✨ Add BSP lockup period (#226)\nec17be4 feat: MSP reject storage requests for existing file keys (#224)\nac7741e feat: MSP respond storage requests tasks (#221)\nca4749d feat: ⏫ upgrade to Polkadot SDK stable2407 (#222)",
          "type": "text",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ],
      "messages": [
        {
          "role": "user",
          "content": [
            {
              "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n",
              "type": "text"
            },
            {
              "text": "You are StorageHub's automated SDK-upgrade planning assistant.\n\nContext:\n1. The project is about to upgrade all crates that source code from the Polkadot-SDK git \\\n   repository to the new tag \"polkadot-stable2409\".\n2. The dependency tree of SDK-sourced crates is available at: \"/storage-hub/sdk-upgrader/output/polkadot_sdk_dependency_tree_polkadot-stable2409.md\"\n   - This file contains the complete dependency hierarchy showing which SDK crates depend on \\\n     which others\n   - You should read this file when planning the upgrade batches to respect inter-crate \\\n     dependencies\n3. Each workspace crate ultimately depends on these SDK crates. To minimise cascade breakage \\\n   we want to upgrade crates in coherent batches that respect their intra-SDK dependencies.\n4. Additional context: the directory \"/storage-hub/sdk-upgrader/output/sdk-upgrades/polkadot-sdk-polkadot-stable2409\" contains a per-pull-request archive \\\n   (patched diff + description) for every PR included in the \"polkadot-stable2409\" release. When you \\\n   encounter compilation or logic errors you MAY inspect those resources to understand API changes.\n5. Optimisation guidelines (follow these to save tokens & CPU time):\\\n   - Wrap long-running cargo invocations with `timeout 300` **instead of** the unsupported `--timeout` flag.\\\n   - When inspecting PR diffs in /storage-hub/sdk-upgrader/output/sdk-upgrades/polkadot-sdk-polkadot-stable2409 use Grep/list_dir to locate matching hunks, then Read only the required line ranges; never Read an entire diff at once.\\\n   - Prefer list_dir (Glob) + grep_search tools over shell `find | grep` pipelines.\\\n   - Cache file contents you have already read; avoid re-reading unchanged files.\\\n   - Batch several edits before re-running workspace-wide builds; start with crate-scoped `cargo check -p <crate>`.\\\n\nTask:\nFIRST - Check if TODO file exists:\n• Use the Read tool to check if \"/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md\" already exists.\n• If it EXISTS: Skip to PHASE 2 (Execution) and work through the existing checklist.\n• If it DOES NOT exist: Complete both PHASE 1 and PHASE 2.\n\nPHASE 1 - Planning (only if TODO file doesn't exist):\n• Read the dependency tree from \"/storage-hub/sdk-upgrader/output/polkadot_sdk_dependency_tree_polkadot-stable2409.md\" using the Read tool to understand crate \\\n  dependencies.\n• Based on the dependency tree, identify independent crate batches for parallel upgrades.\n• Write a Markdown checklist to the file \"/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md\" using the Write tool. Follow the \\\n  pattern:\n  - [ ] Upgrade crates <comma-separated list> to \"polkadot-stable2409\"\n        - [ ] Run \"cargo check\" and capture errors\n        - [ ] Investigate & fix every error (consult scout artefacts where useful)\n        - [ ] Iterate until \"cargo check\" succeeds\n        - [ ] Record a structured entry in \"/storage-hub/sdk-upgrader/output/UPGRADE_REPORT_polkadot-stable2409.md\": heading per batch with Overview ▸ Common issues & fixes ▸ Optimisations & tips (see PHASE 2 Share guidelines).\n\nPHASE 2 - Execution (MANDATORY - DO NOT SKIP):\n• Whether you created a new TODO file or found an existing one, you MUST execute the plan.\n• Read the TODO file and identify all uncompleted tasks (those with [ ] not [x]).\n• For **each** uncompleted top-level checklist item in order, spawn a dedicated sub-agent \\\n  using the Task tool with:\n  - description: \"Upgrade and report on crate batch X to polkadot-stable2409\"\n  - prompt: \"You are a Rust SDK upgrade specialist for polkadot-stable2409. You are part of a team of agents sharing findings in a central report.\n            Your crates: [list crates here]\n            Shared report: /storage-hub/sdk-upgrader/output/UPGRADE_REPORT_polkadot-stable2409.md\n\n            MANDATORY WORKFLOW:\n            1. **Learn:** Read /storage-hub/sdk-upgrader/output/UPGRADE_REPORT_polkadot-stable2409.md to learn from other agents' work.\n            2. **Update:** Modify each crate's Cargo.toml (and any direct dependants) to reference polkadot-stable2409.\n            3. **Check:** Run \"timeout 300 cargo check -p <crate> --all-targets\" for each crate (do *not* use the unsupported \"--timeout\" flag). Where practical, batch multiple fixes before re-invoking the build. Use grep_search & list_dir tools to investigate errors and scout artifacts efficiently, only Reading the precise lines you need.\n            4. **Verify:** After the crate passes, run \"timeout 300 cargo check --workspace\" for a final sanity check.\n            5. **Share:** Contribute **structured knowledge** to /storage-hub/sdk-upgrader/output/UPGRADE_REPORT_polkadot-stable2409.md so future agents can reuse it:\n               • Create (or update) a top-level heading `## <crate batch>` (use comma-separated crate names).\n               • Under that heading write **three sub-sections**:\n                 1. **Overview** – one-sentence description of what changed and why.\n                 2. **Common issues & fixes** – a bulleted list where each item contains:\n                    – 🔴 *Error excerpt* (max 2 lines)\n                    – 🟢 *Root cause* (one line)\n                    – ✅ *Fix applied* (code snippet or commit reference)\n                 3. **Optimisations & tips** – tricks that sped up compilation, search, or coding for this batch (e.g. specific grep_search patterns, config tweaks). Keep each tip ≤ 120 chars.\n               • If you discover a pattern likely to recur (e.g. renamed trait, macro change), add it to a shared **\"Global heuristics\"** section at the top of the file (create it if missing) so later agents read it first.\n               • Keep the report concise but information-dense; prefer bullet lists over prose. This shared knowledge base is critical for accelerating subsequent batches.\n            6. **Commit:** Stage and commit with message \"upgrade: <crate(s)> -> polkadot-stable2409\".\n\n            Work incrementally and avoid unrelated refactors. Stop when the workspace builds without errors.\"\n\n• The Task tool will return the sub-agent's results when complete.\n• After each sub-agent completes, update the checklist in \"/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md\" using the Edit tool \\\n  to mark that item as done.\n• Continue spawning sub-agents for each batch until all items are complete.\n\nIMPORTANT:\n• You are the orchestrator - do NOT modify code yourself.\n• You MUST use the Task tool to spawn sub-agents - creating the TODO list alone is NOT \\\n  sufficient.\n• Each sub-agent handles one batch of crates independently.\n• Sub-agents have access to all the same tools (Read, Write, Edit, Bash) to complete their \\\n  work.\n\n• Emit one top-level checklist item per *independent* crate batch. A batch consists of a root \\\n  crate and all crates that appear indented beneath it in the tree. If a crate has *(no SDK \\\n  dependencies)* treat it as a standalone batch.\n• Preserve original crate name casing. List crates alphabetically within a batch.\n• After the checklist add a section \"How to use the scout artefacts\" with concise \\\n  instructions (max 6 bullet points).\n\nConstraints:\n• Output *only* valid GitHub-flavoured Markdown. Do NOT wrap the file in triple-backticks.\n• Do NOT include any explanatory prose outside the Markdown file content. ",
              "type": "text",
              "cache_control": {
                "type": "ephemeral"
              }
            }
          ]
        }
      ],
      "metadata": {
        "user_id": "claude-1"
      },
      "max_tokens": 32000,
      "temperature": 1
    },
    "response_body": {
      "id": "msg_01Ag6ddZWnZghrmStCLovKfu",
      "role": "assistant",
      "type": "message",
      "model": "claude-opus-4-20250514",
      "usage": {
        "input_tokens": 4,
        "service_tier": "standard",
        "output_tokens": 109,
        "cache_read_input_tokens": 10164,
        "cache_creation_input_tokens": 5304
      },
      "content": [
        {
          "text": "I'll help you plan and execute the SDK upgrade to polkadot-stable2409. Let me start by checking if the TODO file already exists.",
          "type": "text"
        },
        {
          "id": "toolu_01V4xs42Gbqd41h8upfVGbzn",
          "name": "Read",
          "type": "tool_use",
          "input": {
            "file_path": "/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md"
          }
        }
      ],
      "stop_reason": "tool_use",
      "stop_sequence": null
    }
  },
  "child": {
    "request_id": "130814d6-9533-40a0-b58b-dd7ca7ac0a46",
    "domain": "claude-reviews.msldev.io",
    "body": {
      "model": "claude-opus-4-20250514",
      "stream": true,
      "system": [
        {
          "text": "You are Claude Code, Anthropic's official CLI for Claude.",
          "type": "text",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools).\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point. When you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface. You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail. Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n1. Doing the right thing when asked, including taking actions and follow-up actions\n2. Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n3. Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite and TodoRead tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nfalse\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /storage-hub\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.10.14-linuxkit\nToday's date: 2025-06-30\n</env>\nYou are powered by the model named Opus 4. The exact model ID is claude-opus-4-20250514.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: sdk-upgrade-polkadot-stable2409\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\n?? .claude/\n\nRecent commits:\n2a5b783 base files for testing\n85e28c8 feat: ✨ Add BSP lockup period (#226)\nec17be4 feat: MSP reject storage requests for existing file keys (#224)\nac7741e feat: MSP respond storage requests tasks (#221)\nca4749d feat: ⏫ upgrade to Polkadot SDK stable2407 (#222)",
          "type": "text",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ],
      "messages": [
        {
          "role": "user",
          "content": [
            {
              "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n",
              "type": "text"
            },
            {
              "text": "You are StorageHub's automated SDK-upgrade planning assistant.\n\nContext:\n1. The project is about to upgrade all crates that source code from the Polkadot-SDK git \\\n   repository to the new tag \"polkadot-stable2409\".\n2. The dependency tree of SDK-sourced crates is available at: \"/storage-hub/sdk-upgrader/output/polkadot_sdk_dependency_tree_polkadot-stable2409.md\"\n   - This file contains the complete dependency hierarchy showing which SDK crates depend on \\\n     which others\n   - You should read this file when planning the upgrade batches to respect inter-crate \\\n     dependencies\n3. Each workspace crate ultimately depends on these SDK crates. To minimise cascade breakage \\\n   we want to upgrade crates in coherent batches that respect their intra-SDK dependencies.\n4. Additional context: the directory \"/storage-hub/sdk-upgrader/output/sdk-upgrades/polkadot-sdk-polkadot-stable2409\" contains a per-pull-request archive \\\n   (patched diff + description) for every PR included in the \"polkadot-stable2409\" release. When you \\\n   encounter compilation or logic errors you MAY inspect those resources to understand API changes.\n5. Optimisation guidelines (follow these to save tokens & CPU time):\\\n   - Wrap long-running cargo invocations with `timeout 300` **instead of** the unsupported `--timeout` flag.\\\n   - When inspecting PR diffs in /storage-hub/sdk-upgrader/output/sdk-upgrades/polkadot-sdk-polkadot-stable2409 use Grep/list_dir to locate matching hunks, then Read only the required line ranges; never Read an entire diff at once.\\\n   - Prefer list_dir (Glob) + grep_search tools over shell `find | grep` pipelines.\\\n   - Cache file contents you have already read; avoid re-reading unchanged files.\\\n   - Batch several edits before re-running workspace-wide builds; start with crate-scoped `cargo check -p <crate>`.\\\n\nTask:\nFIRST - Check if TODO file exists:\n• Use the Read tool to check if \"/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md\" already exists.\n• If it EXISTS: Skip to PHASE 2 (Execution) and work through the existing checklist.\n• If it DOES NOT exist: Complete both PHASE 1 and PHASE 2.\n\nPHASE 1 - Planning (only if TODO file doesn't exist):\n• Read the dependency tree from \"/storage-hub/sdk-upgrader/output/polkadot_sdk_dependency_tree_polkadot-stable2409.md\" using the Read tool to understand crate \\\n  dependencies.\n• Based on the dependency tree, identify independent crate batches for parallel upgrades.\n• Write a Markdown checklist to the file \"/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md\" using the Write tool. Follow the \\\n  pattern:\n  - [ ] Upgrade crates <comma-separated list> to \"polkadot-stable2409\"\n        - [ ] Run \"cargo check\" and capture errors\n        - [ ] Investigate & fix every error (consult scout artefacts where useful)\n        - [ ] Iterate until \"cargo check\" succeeds\n        - [ ] Record a structured entry in \"/storage-hub/sdk-upgrader/output/UPGRADE_REPORT_polkadot-stable2409.md\": heading per batch with Overview ▸ Common issues & fixes ▸ Optimisations & tips (see PHASE 2 Share guidelines).\n\nPHASE 2 - Execution (MANDATORY - DO NOT SKIP):\n• Whether you created a new TODO file or found an existing one, you MUST execute the plan.\n• Read the TODO file and identify all uncompleted tasks (those with [ ] not [x]).\n• For **each** uncompleted top-level checklist item in order, spawn a dedicated sub-agent \\\n  using the Task tool with:\n  - description: \"Upgrade and report on crate batch X to polkadot-stable2409\"\n  - prompt: \"You are a Rust SDK upgrade specialist for polkadot-stable2409. You are part of a team of agents sharing findings in a central report.\n            Your crates: [list crates here]\n            Shared report: /storage-hub/sdk-upgrader/output/UPGRADE_REPORT_polkadot-stable2409.md\n\n            MANDATORY WORKFLOW:\n            1. **Learn:** Read /storage-hub/sdk-upgrader/output/UPGRADE_REPORT_polkadot-stable2409.md to learn from other agents' work.\n            2. **Update:** Modify each crate's Cargo.toml (and any direct dependants) to reference polkadot-stable2409.\n            3. **Check:** Run \"timeout 300 cargo check -p <crate> --all-targets\" for each crate (do *not* use the unsupported \"--timeout\" flag). Where practical, batch multiple fixes before re-invoking the build. Use grep_search & list_dir tools to investigate errors and scout artifacts efficiently, only Reading the precise lines you need.\n            4. **Verify:** After the crate passes, run \"timeout 300 cargo check --workspace\" for a final sanity check.\n            5. **Share:** Contribute **structured knowledge** to /storage-hub/sdk-upgrader/output/UPGRADE_REPORT_polkadot-stable2409.md so future agents can reuse it:\n               • Create (or update) a top-level heading `## <crate batch>` (use comma-separated crate names).\n               • Under that heading write **three sub-sections**:\n                 1. **Overview** – one-sentence description of what changed and why.\n                 2. **Common issues & fixes** – a bulleted list where each item contains:\n                    – 🔴 *Error excerpt* (max 2 lines)\n                    – 🟢 *Root cause* (one line)\n                    – ✅ *Fix applied* (code snippet or commit reference)\n                 3. **Optimisations & tips** – tricks that sped up compilation, search, or coding for this batch (e.g. specific grep_search patterns, config tweaks). Keep each tip ≤ 120 chars.\n               • If you discover a pattern likely to recur (e.g. renamed trait, macro change), add it to a shared **\"Global heuristics\"** section at the top of the file (create it if missing) so later agents read it first.\n               • Keep the report concise but information-dense; prefer bullet lists over prose. This shared knowledge base is critical for accelerating subsequent batches.\n            6. **Commit:** Stage and commit with message \"upgrade: <crate(s)> -> polkadot-stable2409\".\n\n            Work incrementally and avoid unrelated refactors. Stop when the workspace builds without errors.\"\n\n• The Task tool will return the sub-agent's results when complete.\n• After each sub-agent completes, update the checklist in \"/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md\" using the Edit tool \\\n  to mark that item as done.\n• Continue spawning sub-agents for each batch until all items are complete.\n\nIMPORTANT:\n• You are the orchestrator - do NOT modify code yourself.\n• You MUST use the Task tool to spawn sub-agents - creating the TODO list alone is NOT \\\n  sufficient.\n• Each sub-agent handles one batch of crates independently.\n• Sub-agents have access to all the same tools (Read, Write, Edit, Bash) to complete their \\\n  work.\n\n• Emit one top-level checklist item per *independent* crate batch. A batch consists of a root \\\n  crate and all crates that appear indented beneath it in the tree. If a crate has *(no SDK \\\n  dependencies)* treat it as a standalone batch.\n• Preserve original crate name casing. List crates alphabetically within a batch.\n• After the checklist add a section \"How to use the scout artefacts\" with concise \\\n  instructions (max 6 bullet points).\n\nConstraints:\n• Output *only* valid GitHub-flavoured Markdown. Do NOT wrap the file in triple-backticks.\n• Do NOT include any explanatory prose outside the Markdown file content. ",
              "type": "text"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "text": "I'll help you plan and execute the SDK upgrade to polkadot-stable2409. Let me start by checking if the TODO file already exists.",
              "type": "text"
            },
            {
              "id": "toolu_01V4xs42Gbqd41h8upfVGbzn",
              "name": "Read",
              "type": "tool_use",
              "input": {
                "file_path": "/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md"
              }
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "type": "tool_result",
              "content": "File does not exist.",
              "is_error": true,
              "tool_use_id": "toolu_01V4xs42Gbqd41h8upfVGbzn"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "text": "I'll help you plan and execute the SDK upgrade to polkadot-stable2409. Let me start by checking if the TODO file already exists.",
              "type": "text"
            },
            {
              "id": "toolu_01V4xs42Gbqd41h8upfVGbzn",
              "name": "Read",
              "type": "tool_use",
              "input": {
                "file_path": "/storage-hub/sdk-upgrader/output/TODO_polkadot-stable2409.md"
              },
              "cache_control": {
                "type": "ephemeral"
              }
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "type": "tool_result",
              "content": "File does not exist.",
              "is_error": true,
              "tool_use_id": "toolu_01V4xs42Gbqd41h8upfVGbzn",
              "cache_control": {
                "type": "ephemeral"
              }
            }
          ]
        }
      ],
      "metadata": {
        "user_id": "claude-1"
      },
      "max_tokens": 32000,
      "temperature": 1
    }
  }
}
