{
  "description": "Test linking between 19e59e9a-2972-4c72-9c5f-0002252fe0f3 and 0a8b4c5f-12b2-4295-9352-70b65cbb94fb",
  "type": "standard",
  "expectedLink": true,
  "parent": {
    "request_id": "19e59e9a-2972-4c72-9c5f-0002252fe0f3",
    "domain": "localhost:3000",
    "conversation_id": "96505ba6-9b08-42cf-9474-f3ec1ea96ca9",
    "branch_id": "main",
    "current_message_hash": null,
    "parent_message_hash": null,
    "system_hash": null,
    "body": {
      "model": "claude-opus-4-20250514",
      "tools": [
        {
          "name": "Task",
          "description": "Launch a new agent that has access to the following tools: Bash, Glob, Grep, LS, exit_plan_mode, Read, Edit, MultiEdit, Write, NotebookRead, NotebookEdit, WebFetch, TodoRead, TodoWrite, WebSearch, mcp__perplexity-ask__perplexity_ask, mcp__zen__chat, mcp__zen__thinkdeep, mcp__zen__planner, mcp__zen__consensus, mcp__zen__codereview, mcp__zen__precommit, mcp__zen__debug, mcp__zen__secaudit, mcp__zen__docgen, mcp__zen__analyze, mcp__zen__refactor, mcp__zen__tracer, mcp__zen__testgen, mcp__zen__listmodels, mcp__zen__version. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use the Agent tool to perform the search for you.\n\nWhen to use the Agent tool:\n- If you are searching for a keyword like \"config\" or \"logger\", or for questions like \"which file does X?\", the Agent tool is strongly recommended\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Writing code and running bash commands (use other tools for that)\n- Other tasks that are not related to searching for a keyword or file\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["description", "prompt"],
            "properties": {
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 300000ms / 5 minutes). If not specified, commands will timeout after 300000ms (5 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   ðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   ðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["command"],
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 300000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["pattern"],
            "properties": {
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              },
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Grep",
          "description": "\n- Fast content search tool that works with any codebase size\n- Searches file contents using regular expressions\n- Supports full regex syntax (eg. \"log.*Error\", \"function\\s+\\w+\", etc.)\n- Filter files by pattern with the include parameter (eg. \"*.js\", \"*.{ts,tsx}\")\n- Returns file paths with at least one match sorted by modification time\n- Use this tool when you need to find files containing specific patterns\n- If you need to identify/count the number of matches within files, use the Bash tool with `rg` (ripgrep) directly. Do NOT use `grep`.\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["pattern"],
            "properties": {
              "path": {
                "type": "string",
                "description": "The directory to search in. Defaults to the current working directory."
              },
              "include": {
                "type": "string",
                "description": "File pattern to include in the search (e.g. \"*.js\", \"*.{ts,tsx}\")"
              },
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["path"],
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "exit_plan_mode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode. \nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg. \n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["plan"],
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful. \n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["file_path"],
            "properties": {
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files. \n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file. \n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`. \n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["file_path", "old_string", "new_string"],
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["file_path", "edits"],
            "properties": {
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["old_string", "new_string"],
                  "properties": {
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              },
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["file_path", "content"],
            "properties": {
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              },
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["notebook_path"],
            "properties": {
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              },
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["notebook_path", "new_source"],
            "properties": {
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "cell_type": {
                "enum": ["code", "markdown"],
                "type": "string",
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "enum": ["replace", "insert", "delete"],
                "type": "string",
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["url", "prompt"],
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "TodoRead",
          "description": "Use this tool to read the current to-do list for the session. This tool should be used proactively and frequently to ensure that you are aware of\nthe status of the current task list. You should make use of this tool as often as possible, especially in the following situations:\n- At the beginning of conversations to see what's pending\n- Before starting new tasks to prioritize work\n- When the user asks about previous tasks or plans\n- Whenever you're uncertain about what to do next\n- After completing tasks to update your understanding of remaining work\n- After every few messages to ensure you're on track\n\nUsage:\n- This tool takes in no parameters. So leave the input blank or empty. DO NOT include a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.\n- Returns a list of todo items with their status, priority, and content\n- Use this information to track progress and plan next steps\n- If no todos exist yet, an empty list will be returned",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {},
            "description": "No input is required, leave this field blank. NOTE that we do not require a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.",
            "additionalProperties": true
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["todos"],
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["content", "status", "priority", "id"],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "enum": ["pending", "in_progress", "completed"],
                      "type": "string"
                    },
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "priority": {
                      "enum": ["high", "medium", "low"],
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["query"],
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__perplexity-ask__perplexity_ask",
          "description": "Engages in a conversation using the Sonar API. Accepts an array of messages (each with a role and content) and returns a ask completion response from the Perplexity model.",
          "input_schema": {
            "type": "object",
            "required": ["messages"],
            "properties": {
              "messages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["role", "content"],
                  "properties": {
                    "role": {
                      "type": "string",
                      "description": "Role of the message (e.g., system, user, assistant)"
                    },
                    "content": {
                      "type": "string",
                      "description": "The content of the message"
                    }
                  }
                },
                "description": "Array of conversation messages"
              }
            }
          }
        },
        {
          "name": "mcp__zen__chat",
          "description": "GENERAL CHAT & COLLABORATIVE THINKING - Use the AI model as your thinking partner! Perfect for: bouncing ideas during your own analysis, getting second opinions on your plans, collaborative brainstorming, validating your checklists and approaches, exploring alternatives. Also great for: explanations, comparisons, general development questions. Use this when you want to ask questions, brainstorm ideas, get opinions, discuss topics, share your thinking, or need explanations about concepts and approaches. Note: If you're not currently using a top-tier model such as Opus 4 or above, these tools can provide enhanced capabilities.",
          "input_schema": {
            "type": "object",
            "required": ["prompt", "model"],
            "properties": {
              "files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional files for context (must be FULL absolute paths to real files / folders - DO NOT SHORTEN)"
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional images for visual context. Useful for UI discussions, diagrams, visual problems, error screens, or architectural mockups. (must be FULL absolute paths to real files / folders - DO NOT SHORTEN - OR these can be bas64 data)"
              },
              "prompt": {
                "type": "string",
                "description": "You MUST provide a thorough, expressive question or share an idea with as much context as possible. Remember: you're talking to an assistant who has deep expertise and can provide nuanced insights. Include your current thinking, specific challenges, background context, what you've already tried, and what kind of response would be most helpful. The more context and detail you provide, the more valuable and targeted the response will be."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Response creativity (0-1, default 0.5)"
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max)"
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. Can be used to continue conversations across different tools. Only provide this if continuing a previous conversation thread."
              }
            }
          }
        },
        {
          "name": "mcp__zen__thinkdeep",
          "description": "COMPREHENSIVE INVESTIGATION & REASONING - Multi-stage workflow for complex problem analysis. Use this when you need structured evidence-based investigation, systematic hypothesis testing, or expert validation. Perfect for: architecture decisions, complex bugs, performance challenges, security analysis. Provides methodical investigation with assumption validation, alternative solution exploration, and rigorous analysis. IMPORTANT: Choose the appropriate mode based on task complexity - 'low' for quick investigation, 'medium' for standard problems, 'high' for complex issues (default), 'max' for extremely complex challenges requiring exhaustive investigation. When in doubt, err on the side of a higher mode for thorough systematic analysis and expert validation. Note: If you're not currently using a top-tier model such as Opus 4 or above, these tools can provide enhanced capabilities.",
          "input_schema": {
            "type": "object",
            "title": "ThinkdeepRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional image(s) for visual context. Accepts absolute file paths or base64 data URLs. Only provide when user explicitly mentions images. When including images, please describe what you believe each image contains to aid with contextual understanding. Useful for UI discussions, diagrams, visual problems, error screens, architecture mockups, and visual analysis tasks."
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step of the work"
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Confidence level in findings: exploring, low, medium, high, certain"
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "focus_areas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific aspects to focus on (architecture, performance, security, etc.)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in the work sequence (starts at 1)"
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the work"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of files examined during this work step"
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to the issue/goal"
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "problem_context": {
                "type": "string",
                "description": "Provide additional context about the problem or goal. Be as expressive as possible. More information will be very helpful for the analysis."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed after this one"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "Step number to backtrack from if work needs revision"
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__planner",
          "description": "INTERACTIVE SEQUENTIAL PLANNER - Break down complex tasks through step-by-step planning. This tool enables you to think sequentially, building plans incrementally with the ability to revise, branch, and adapt as understanding deepens.\n\nHow it works:\n- Start with step 1: describe the task/problem to plan\n- Continue with subsequent steps, building the plan piece by piece\n- Adjust total_steps estimate as you progress\n- Revise previous steps when new insights emerge\n- Branch into alternative approaches when needed\n- Add more steps even after reaching the initial estimate\n\nKey features:\n- Sequential thinking with full context awareness\n- Forced deep reflection for complex plans (â‰¥5 steps) in early stages\n- Branching for exploring alternative strategies\n- Revision capabilities to update earlier decisions\n- Dynamic step count adjustment\n\nENHANCED: For complex plans (â‰¥5 steps), the first 3 steps enforce deep thinking pauses\nto prevent surface-level planning and ensure thorough consideration of alternatives,\ndependencies, and strategic decisions before moving to tactical details.\n\nPerfect for: complex project planning, system design with unknowns, migration strategies, architectural decisions, problem decomposition.",
          "input_schema": {
            "type": "object",
            "title": "PlannerRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["step", "step_number", "total_steps", "next_step_required", "model"],
            "properties": {
              "step": {
                "type": "string",
                "description": "Your current planning step. For the first step, describe the task/problem to plan and be extremely expressive so that subsequent steps can break this down into simpler steps. For subsequent steps, provide the actual planning step content. Can include: regular planning steps, revisions of previous steps, questions about previous decisions, realizations about needing more analysis, changes in approach, etc."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "branch_id": {
                "type": "string",
                "description": "Identifier for the current branch (e.g., 'approach-A', 'microservices-path')"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in the work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the work"
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "is_branch_point": {
                "type": "boolean",
                "description": "True if this step branches from a previous step to explore alternatives"
              },
              "branch_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If is_branch_point is true, which step number is the branching point"
              },
              "is_step_revision": {
                "type": "boolean",
                "description": "True if this step revises/replaces a previous step"
              },
              "more_steps_needed": {
                "type": "boolean",
                "description": "True if more steps are needed beyond the initial estimate"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed after this one"
              },
              "revises_step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "If is_step_revision is true, which step number is being revised"
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__consensus",
          "description": "COMPREHENSIVE CONSENSUS WORKFLOW - Step-by-step multi-model consensus with structured analysis. This tool guides you through a systematic process where you:\n\n1. Start with step 1: provide your own neutral analysis of the proposal\n2. The tool will then consult each specified model one by one\n3. You'll receive each model's response in subsequent steps\n4. Track and synthesize perspectives as they accumulate\n5. Final step: present comprehensive consensus and recommendations\n\nIMPORTANT: This workflow enforces sequential model consultation:\n- Step 1 is always your independent analysis\n- Each subsequent step processes one model response\n- Total steps = number of models (each step includes consultation + response)\n- Models can have stances (for/against/neutral) for structured debate\n- Same model can be used multiple times with different stances\n- Each model + stance combination must be unique\n\nPerfect for: complex decisions, architectural choices, feature proposals, technology evaluations, strategic planning.",
          "input_schema": {
            "type": "object",
            "title": "ConsensusRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe your current consensus analysis step. In step 1, provide your own neutral, balanced analysis of the proposal/idea/plan after thinking carefully about all aspects. Consider technical feasibility, user value, implementation complexity, and alternatives. In subsequent steps (2+), you will receive individual model responses to synthesize. CRITICAL: Be thorough and balanced in your initial assessment, considering both benefits and risks, opportunities and challenges."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of image paths or base64 data URLs for visual context. Useful for UI/UX discussions, architecture diagrams, mockups, or any visual references that help inform the consensus analysis."
              },
              "models": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["model"],
                  "properties": {
                    "model": {
                      "type": "string"
                    },
                    "stance": {
                      "enum": ["for", "against", "neutral"],
                      "type": "string",
                      "default": "neutral"
                    },
                    "stance_prompt": {
                      "type": "string"
                    }
                  }
                },
                "description": "List of model configurations to consult. Each can have a model name, stance (for/against/neutral), and optional custom stance prompt. The same model can be used multiple times with different stances, but each model + stance combination must be unique. Example: [{'model': 'o3', 'stance': 'for'}, {'model': 'o3', 'stance': 'against'}, {'model': 'flash', 'stance': 'neutral'}]"
              },
              "findings": {
                "type": "string",
                "description": "In step 1, provide your comprehensive analysis of the proposal. In steps 2+, summarize the key points from the model response received, noting agreements and disagreements with previous analyses."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the consensus workflow, beginning at 1. Step 1 is your analysis, steps 2+ are for processing individual model responses."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Total number of steps needed. This equals the number of models to consult. Step 1 includes your analysis + first model consultation on return of the call. Final step includes last model consultation + synthesis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files that are relevant to the consensus analysis. Include files that help understand the proposal, provide context, or contain implementation details."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "model_responses": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Accumulated responses from models consulted so far. Internal field for tracking progress."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if more models need to be consulted. False when ready for final synthesis."
              },
              "current_model_index": {
                "type": "integer",
                "minimum": 0,
                "description": "Internal tracking of which model is being consulted (0-based index). Used to determine which model to call next."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__codereview",
          "description": "COMPREHENSIVE CODE REVIEW WORKFLOW - Step-by-step code review with expert analysis. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your code review investigation plan\n2. STOP and investigate code structure, patterns, and potential issues\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and issues throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive code review, security audits, performance analysis, architectural assessment, code quality evaluation, anti-pattern detection.",
          "input_schema": {
            "type": "object",
            "title": "CodereviewRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating for code review by thinking deeply about the code structure, patterns, and potential issues. In step 1, clearly state your review plan and begin forming a systematic approach after thinking carefully about what needs to be analyzed. You must begin by passing the file path for the initial code you are about to review in relevant_files. CRITICAL: Remember to thoroughly examine code quality, security implications, performance concerns, and architectural patterns. Consider not only obvious bugs and issues but also subtle concerns like over-engineering, unnecessary complexity, design patterns that could be simplified, areas where architecture might not scale well, missing abstractions, and ways to reduce complexity while maintaining functionality. Map out the codebase structure, understand the business logic, and identify areas requiring deeper analysis. In all later steps, continue exploring with precision: trace dependencies, verify assumptions, and adapt your understanding as you uncover more evidence."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, UI mockups, design documents, or visual references that help with code review context. Only include if they materially assist understanding or assessment."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about the code being reviewed. Include analysis of code quality, security concerns, performance issues, architectural patterns, design decisions, potential bugs, code smells, and maintainability considerations. Be specific and avoid vague languageâ€”document what you now know about the code and how it affects your assessment. IMPORTANT: Document both positive findings (good patterns, proper implementations, well-designed components) and concerns (potential issues, anti-patterns, security risks, performance bottlenecks). In later steps, confirm or update past findings with additional evidence."
              },
              "focus_on": {
                "type": "string",
                "description": "Specific aspects to focus on or additional context that would help understand areas of concern"
              },
              "standards": {
                "type": "string",
                "description": "Coding standards to enforce during the review"
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the code review assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some evidence gathered), 'high' (strong evidence), 'certain' (only when the code review is thoroughly complete and all significant issues are identified). Do NOT use 'certain' unless the code review is comprehensively complete, use 'high' instead not 100% sure. Using 'certain' prevents additional expert analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "review_type": {
                "enum": ["full", "security", "performance", "quick"],
                "type": "string",
                "default": "full",
                "description": "Type of review to perform (full, security, performance, quick)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the code review sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the code review. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of issues identified during the investigation. Each issue should be a dictionary with 'severity' (critical, high, medium, low) and 'description' fields. Include security vulnerabilities, performance bottlenecks, code quality issues, architectural concerns, maintainability problems, over-engineering, unnecessary complexity, etc."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the code review investigation so far. Include even files ruled out or found to be unrelated, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "For when this is the first step, please pass absolute file paths of relevant code to review (do not clip file paths). When used for the final step, this contains a subset of files_checked (as full absolute paths) that contain code directly relevant to the review or contain significant issues, patterns, or examples worth highlighting. Only list those that are directly tied to important findings, security concerns, performance issues, or architectural decisions. This could include core implementation files, configuration files, or files with notable patterns."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "severity_filter": {
                "enum": ["critical", "high", "medium", "low", "all"],
                "type": "string",
                "default": "all",
                "description": "Minimum severity level to report on the issues found"
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the code review analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__precommit",
          "description": "COMPREHENSIVE PRECOMMIT WORKFLOW - Step-by-step pre-commit validation with expert analysis. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your pre-commit validation plan\n2. STOP and investigate git changes, repository status, and file modifications\n3. Report findings in step 2 with concrete evidence from actual changes\n4. Continue investigating between each step\n5. Track findings, relevant files, and issues throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from git analysis\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive pre-commit validation, multi-repository analysis, security review, change impact assessment, completeness verification.",
          "input_schema": {
            "type": "object",
            "title": "PrecommitRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "path": {
                "type": "string",
                "description": "Starting absolute path to the directory to search for git repositories (must be FULL absolute paths - DO NOT SHORTEN)."
              },
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating for pre-commit validation by thinking deeply about the changes and their potential impact. In step 1, clearly state your investigation plan and begin forming a systematic approach after thinking carefully about what needs to be validated. CRITICAL: Remember to thoroughly examine all git repositories, staged/unstaged changes, and understand the scope and intent of modifications. Consider not only immediate correctness but also potential future consequences, security implications, performance impacts, and maintainability concerns. Map out changed files, understand the business logic, and identify areas requiring deeper analysis. In all later steps, continue exploring with precision: trace dependencies, verify hypotheses, and adapt your understanding as you uncover more evidence."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to screenshots, UI mockups, or visual references that help validate the changes. Only include if they materially assist understanding or assessment of the commit."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about the changes being committed. Include analysis of git diffs, file modifications, new functionality, potential issues identified, code quality observations, and security considerations. Be specific and avoid vague languageâ€”document what you now know about the changes and how they affect your assessment. IMPORTANT: Document both positive findings (good patterns, proper implementations) and concerns (potential bugs, missing tests, security risks). In later steps, confirm or update past findings with additional evidence."
              },
              "focus_on": {
                "type": "string",
                "description": "Specific aspects to focus on (e.g., 'security implications', 'performance impact', 'test coverage')."
              },
              "compare_to": {
                "type": "string",
                "description": "Optional: A git ref (branch, tag, commit hash) to compare against. Check remote branches if local does not exist.If not provided, investigates local staged and unstaged changes."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some evidence gathered), 'high' (strong evidence), 'certain' (only when the analysis is complete and all issues are identified). Do NOT use 'certain' unless the pre-commit validation is thoroughly complete, use 'high' instead not 100% sure. Using 'certain' prevents additional expert analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the pre-commit investigation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the pre-commit investigation. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of issues identified during the investigation. Each issue should be a dictionary with 'severity' (critical, high, medium, low) and 'description' fields. Include potential bugs, security concerns, performance issues, missing tests, incomplete implementations, etc."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the pre-commit investigation so far. Include even files ruled out or found to be unchanged, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "include_staged": {
                "type": "boolean",
                "default": true,
                "description": "Include staged changes in the investigation. Only applies if 'compare_to' is not set."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain changes or are directly relevant to the commit validation. Only list those that are directly tied to the changes being committed, their dependencies, or files that need validation. This could include modified files, related configuration, tests, or documentation."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "severity_filter": {
                "enum": ["critical", "high", "medium", "low", "all"],
                "type": "string",
                "default": "all",
                "description": "Minimum severity level to report on the changes."
              },
              "include_unstaged": {
                "type": "boolean",
                "default": true,
                "description": "Include uncommitted (unstaged) changes in the investigation. Only applies if 'compare_to' is not set."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the pre-commit analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__debug",
          "description": "DEBUG & ROOT CAUSE ANALYSIS - Systematic self-investigation followed by expert analysis. This tool guides you through a step-by-step investigation process where you:\n\n1. Start with step 1: describe the issue to investigate\n2. STOP and investigate using appropriate tools\n3. Report findings in step 2 with concrete evidence from actual code\n4. Continue investigating between each debug step\n5. Track findings, relevant files, and methods throughout\n6. Update hypotheses as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each debug call, you MUST investigate before calling debug again\n- Each step must include NEW evidence from code examination\n- No recursive debug calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: complex bugs, mysterious errors, performance issues, race conditions, memory leaks, integration problems.",
          "input_schema": {
            "type": "object",
            "title": "DebugRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating by thinking deeply about the issue and its possible causes. In step 1, clearly state the issue and begin forming an investigative direction after thinking carefullyabout the described problem. Ask further questions from the user if you think these will help with yourunderstanding and investigation. CRITICAL: Remember that reported symptoms might originate from code far from where they manifest. Also be aware that after thorough investigation, you might find NO BUG EXISTS - it could be a misunderstanding or expectation mismatch. Consider not only obvious failures, but also subtle contributing factors like upstream logic, invalid inputs, missing preconditions, or hidden side effects. Map out the flow of related functions or modules. Identify call paths where input values or branching logic could cause instability. In concurrent systems, watch for race conditions, shared state, or timing dependencies. In all later steps, continue exploring with precision: trace deeper dependencies, verify hypotheses, and adapt your understanding as you uncover more evidence."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to screenshots or UI visuals that clarify the issue. Only include if they materially assist understanding or hypothesis formulation."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step. Include new clues, unexpected behavior, evidence from code or logs, or disproven theories. Be specific and avoid vague languageâ€”document what you now know and how it affects your hypothesis. IMPORTANT: If you find no evidence supporting the reported issue after thorough investigation, document this clearly. Finding 'no bug' is a valid outcome if the investigation was comprehensive. In later steps, confirm or disprove past findings with reason."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the hypothesis. Use: 'exploring' (starting out), 'low' (early idea), 'medium' (some supporting evidence), 'high' (strong evidence), 'certain' (only when the root cause and minimal fix are both confirmed). Do NOT use 'certain' unless the issue can be fully resolved with a fix, use 'high' instead when not 100% sure. Using 'certain' prevents you from taking assistance from another thought-partner."
              },
              "hypothesis": {
                "type": "string",
                "description": "A concrete theory for what's causing the issue based on the evidence so far. This can include suspected failures, incorrect assumptions, or violated constraints. VALID HYPOTHESES INCLUDE: 'No bug found - possible user misunderstanding' or 'Symptoms appear unrelated to any code issue' if evidence supports this. When no bug is found, consider suggesting: 'Recommend discussing with thought partner/engineering assistant for clarification of expected behavior.' You are encouraged to revise or abandon hypotheses in later steps as needed based on evidence."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the investigation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the investigation. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the investigation so far. Include even files ruled out, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain code directly relevant to the issue. Only list those that are directly tied to the root cause or its effects. This could include the cause, trigger, or place of manifestation."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the root cause is known or the investigation is complete."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or hypothesis needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__secaudit",
          "description": "COMPREHENSIVE SECURITY AUDIT WORKFLOW - Step-by-step security assessment with expert analysis. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your security investigation plan\n2. STOP and investigate code structure, patterns, and security issues\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and security issues throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert security analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive security assessment, OWASP Top 10 analysis, compliance evaluation, vulnerability identification, threat modeling, security architecture review.",
          "input_schema": {
            "type": "object",
            "title": "SecauditRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating for security audit by thinking deeply about security implications, threat vectors, and protection mechanisms. In step 1, clearly state your security audit plan and begin forming a systematic approach after identifying the application type, technology stack, and relevant security requirements. You must begin by passing the file path for the initial code you are about to audit in relevant_files. CRITICAL: Follow the OWASP Top 10 systematic checklist, examine authentication/authorization mechanisms, analyze input validation and data handling, assess dependency vulnerabilities, and evaluate infrastructure security. Consider not only obvious vulnerabilities but also subtle security gaps, configuration issues, design flaws, and compliance requirements. Map out the attack surface, understand the threat landscape, and identify areas requiring deeper security analysis. In all later steps, continue exploring with precision: trace security dependencies, verify security assumptions, and adapt your understanding as you uncover security evidence."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, security models, threat models, or visual references that help with security audit context. Only include if they materially assist understanding or assessment of security posture."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about security aspects of the code being audited. Include analysis of security vulnerabilities, authentication/authorization issues, input validation gaps, encryption weaknesses, configuration problems, and compliance concerns. Be specific and avoid vague languageâ€”document what you now know about the security posture and how it affects your assessment. IMPORTANT: Document both positive security findings (proper implementations, good security practices) and concerns (vulnerabilities, security gaps, compliance issues). In later steps, confirm or update past findings with additional evidence."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the security audit assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some evidence gathered), 'high' (strong evidence), 'certain' (only when the security audit is thoroughly complete and all significant security issues are identified). Do NOT use 'certain' unless the security audit is comprehensively complete, use 'high' instead not 100% sure. Using 'certain' prevents additional expert analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "audit_focus": {
                "enum": ["owasp", "compliance", "infrastructure", "dependencies", "comprehensive"],
                "type": "string",
                "default": "comprehensive",
                "description": "Primary security focus areas for this audit (owasp, compliance, infrastructure, dependencies)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the security audit sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the security audit. Adjust and increase as new security findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of security issues identified during the investigation. Each issue should be a dictionary with 'severity' (critical, high, medium, low) and 'description' fields. Include security vulnerabilities, authentication bypasses, authorization flaws, injection vulnerabilities, cryptographic weaknesses, configuration issues, compliance gaps, etc."
              },
              "threat_level": {
                "enum": ["low", "medium", "high", "critical"],
                "type": "string",
                "default": "medium",
                "description": "Assess the threat level based on application context: 'low' (internal tools, low-risk data), 'medium' (customer-facing, business data), 'high' (financial, healthcare, regulated industry), 'critical' (payment processing, sensitive personal data). This guides prioritization."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the security audit investigation so far. Include even files ruled out or found to be unrelated, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "For when this is the first step, please pass absolute file paths of relevant code to audit (do not clip file paths). When used for the final step, this contains a subset of files_checked (as full absolute paths) that contain code directly relevant to the security audit or contain significant security issues, patterns, or examples worth highlighting. Only list those that are directly tied to important security findings, vulnerabilities, authentication issues, or security architectural decisions. This could include authentication modules, input validation files, configuration files, or files with notable security patterns."
              },
              "security_scope": {
                "type": "string",
                "description": "Define the security scope and application context (web app, mobile app, API, enterprise system, cloud service). Include technology stack, user types, data sensitivity, and threat landscape. This helps focus the security assessment appropriately."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "severity_filter": {
                "enum": ["critical", "high", "medium", "low", "all"],
                "type": "string",
                "default": "all",
                "description": "Minimum severity level to report on the security issues found"
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the security audit analysis is complete and ALL threats have been uncovered, ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "compliance_requirements": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List applicable compliance frameworks and security standards (SOC2, PCI DSS, HIPAA, GDPR, ISO 27001, NIST). Include industry-specific requirements that affect security controls."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__docgen",
          "description": "COMPREHENSIVE DOCUMENTATION GENERATION - Step-by-step code documentation with expert analysis. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your documentation investigation plan\n2. STOP and investigate code structure, patterns, and documentation needs\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and documentation opportunities throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive documentation generation, code documentation analysis, complexity assessment, documentation modernization, API documentation.",
          "input_schema": {
            "type": "object",
            "title": "DocgenRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "document_complexity",
              "document_flow",
              "update_existing",
              "comments_on_complex_logic",
              "num_files_documented",
              "total_files_to_document"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step of the work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in the work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the work"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "document_flow": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include call flow and dependency information in documentation. Default: true. When enabled, documents which methods this function calls and which methods call this function."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to the issue/goal"
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "update_existing": {
                "type": "boolean",
                "default": true,
                "description": "Whether to update existing documentation when it's found to be incorrect or incomplete. Default: true. When enabled, improves existing docs rather than just adding new ones."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed after this one"
              },
              "document_complexity": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include algorithmic complexity (Big O) analysis in function/method documentation. Default: true. When enabled, analyzes and documents the computational complexity of algorithms."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "num_files_documented": {
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "description": "CRITICAL COUNTER: Number of files you have COMPLETELY documented so far. Start at 0. Increment by 1 only when a file is 100% documented (all functions/methods have documentation). This counter prevents premature completion - you CANNOT set next_step_required=false unless num_files_documented equals total_files_to_document."
              },
              "total_files_to_document": {
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "description": "CRITICAL COUNTER: Total number of files discovered that need documentation in current directory. Set this in step 1 after discovering all files. This is the target number - when num_files_documented reaches this number, then and ONLY then can you set next_step_required=false. This prevents stopping after documenting just one file."
              },
              "comments_on_complex_logic": {
                "type": "boolean",
                "default": true,
                "description": "Whether to add inline comments around complex logic within functions. Default: true. When enabled, adds explanatory comments for non-obvious algorithmic steps."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__analyze",
          "description": "COMPREHENSIVE ANALYSIS WORKFLOW - Step-by-step code analysis with expert validation. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your analysis investigation plan\n2. STOP and investigate code structure, patterns, and architectural decisions\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and insights throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, always receive expert validation\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive code analysis, architectural assessment, performance evaluation, security analysis, maintainability review, pattern detection, strategic planning.",
          "input_schema": {
            "type": "object",
            "title": "AnalyzeRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "What to analyze or look for in this step. In step 1, describe what you want to analyze and begin forming an analytical approach after thinking carefully about what needs to be examined. Consider code quality, performance implications, architectural patterns, and design decisions. Map out the codebase structure, understand the business logic, and identify areas requiring deeper analysis. In later steps, continue exploring with precision and adapt your understanding as you uncover more insights."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, design documents, or visual references that help with analysis context. Only include if they materially assist understanding or assessment."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about the code being analyzed. Include analysis of architectural patterns, design decisions, tech stack assessment, scalability characteristics, performance implications, maintainability factors, security posture, and strategic improvement opportunities. Be specific and avoid vague languageâ€”document what you now know about the codebase and how it affects your assessment. IMPORTANT: Document both strengths (good patterns, solid architecture, well-designed components) and concerns (tech debt, scalability risks, overengineering, unnecessary complexity). In later steps, confirm or update past findings with additional evidence."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Your confidence level in the current analysis findings: exploring (early investigation), low (some insights but more needed), medium (solid understanding), high (comprehensive insights), certain (complete analysis ready for expert validation)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the analysis sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the analysis. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues or concerns identified during analysis, each with severity level (critical, high, medium, low)"
              },
              "analysis_type": {
                "enum": ["architecture", "performance", "security", "quality", "general"],
                "type": "string",
                "default": "general",
                "description": "Type of analysis to perform (architecture, performance, security, quality, general)"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the analysis investigation so far. Include even files ruled out or found to be unrelated, as this tracks your exploration path."
              },
              "output_format": {
                "enum": ["summary", "detailed", "actionable"],
                "type": "string",
                "default": "detailed",
                "description": "How to format the output (summary, detailed, actionable)"
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain code directly relevant to the analysis or contain significant patterns, architectural decisions, or examples worth highlighting. Only list those that are directly tied to important findings, architectural insights, performance characteristics, or strategic improvement opportunities. This could include core implementation files, configuration files, or files demonstrating key patterns."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__refactor",
          "description": "COMPREHENSIVE REFACTORING WORKFLOW - Step-by-step refactoring analysis with expert validation. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your refactoring investigation plan\n2. STOP and investigate code structure, patterns, and potential improvements\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and refactoring opportunities throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive refactoring analysis, code smell detection, decomposition planning, modernization opportunities, organization improvements, maintainability enhancements.",
          "input_schema": {
            "type": "object",
            "title": "RefactorRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating for refactoring by thinking deeply about the code structure, patterns, and potential improvements. In step 1, clearly state your refactoring investigation plan and begin forming a systematic approach after thinking carefully about what needs to be analyzed. CRITICAL: Remember to thoroughly examine code quality, performance implications, maintainability concerns, and architectural patterns. Consider not only obvious code smells and issues but also opportunities for decomposition, modernization, organization improvements, and ways to reduce complexity while maintaining functionality. Map out the codebase structure, understand the business logic, and identify areas requiring refactoring. In all later steps, continue exploring with precision: trace dependencies, verify assumptions, and adapt your understanding as you uncover more refactoring opportunities."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, UI mockups, design documents, or visual references that help with refactoring context. Only include if they materially assist understanding or assessment."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about refactoring opportunities in the code. Include analysis of code smells, decomposition opportunities, modernization possibilities, organization improvements, architectural patterns, design decisions, potential performance optimizations, and maintainability enhancements. Be specific and avoid vague languageâ€”document what you now know about the code and how it could be improved. IMPORTANT: Document both positive aspects (good patterns, well-designed components) and improvement opportunities (code smells, overly complex functions, outdated patterns, organization issues). In later steps, confirm or update past findings with additional evidence."
              },
              "confidence": {
                "enum": ["exploring", "incomplete", "partial", "complete"],
                "type": "string",
                "default": "incomplete",
                "description": "Indicate your current confidence in the refactoring analysis completeness. Use: 'exploring' (starting analysis), 'incomplete' (just started or significant work remaining), 'partial' (some refactoring opportunities identified but more analysis needed), 'complete' (comprehensive refactoring analysis finished with all major opportunities identified and Claude can handle 100% confidently without help). Use 'complete' ONLY when you have fully analyzed all code, identified all significant refactoring opportunities, and can provide comprehensive recommendations without expert assistance. When files are too large to read fully or analysis is uncertain, use 'partial'. Using 'complete' prevents expert analysis to save time and money."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "focus_areas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific areas to focus on (e.g., 'performance', 'readability', 'maintainability', 'security')"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the refactoring investigation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the refactoring investigation. Adjust as new opportunities emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of refactoring opportunities identified during the investigation. Each opportunity should be a dictionary with 'severity' (critical, high, medium, low), 'type' (codesmells, decompose, modernize, organization), and 'description' fields. Include code smells, decomposition opportunities, modernization possibilities, organization improvements, performance optimizations, maintainability enhancements, etc."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the refactoring investigation so far. Include even files ruled out or found to need no refactoring, as this tracks your exploration path."
              },
              "refactor_type": {
                "enum": ["codesmells", "decompose", "modernize", "organization"],
                "type": "string",
                "default": "codesmells",
                "description": "Type of refactoring analysis to perform (codesmells, decompose, modernize, organization)"
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain code requiring refactoring or are directly relevant to the refactoring opportunities identified. Only list those that are directly tied to specific refactoring opportunities, code smells, decomposition needs, or improvement areas. This could include files with code smells, overly large functions/classes, outdated patterns, or organization issues."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the refactoring analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "style_guide_examples": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional existing code files to use as style/pattern reference (must be FULL absolute paths to real files / folders - DO NOT SHORTEN). These files represent the target coding style and patterns for the project."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__tracer",
          "description": "STEP-BY-STEP CODE TRACING WORKFLOW - Systematic code analysis through guided investigation. This tool guides you through a structured investigation process where you:\n\n1. Start with step 1: describe your tracing plan and target\n2. STOP and investigate code structure, patterns, and relationships\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and code relationships throughout\n6. Build comprehensive understanding as analysis evolves\n7. Complete with detailed output formatted according to trace mode\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nTRACE MODES:\n- 'ask': Default mode - prompts you to choose between precision or dependencies modes with explanations\n- 'precision': For methods/functions - traces execution flow, call chains, and usage patterns\n- 'dependencies': For classes/modules - maps structural relationships and bidirectional dependencies\n\nPerfect for: method execution flow analysis, dependency mapping, call chain tracing, structural relationship analysis, architectural understanding, code comprehension.",
          "input_schema": {
            "type": "object",
            "title": "TracerRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "target_description",
              "trace_mode",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional images of system architecture diagrams, flow charts, or visual references to help understand the tracing context"
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step of the work"
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Confidence level in findings: exploring, low, medium, high, certain"
              },
              "trace_mode": {
                "enum": ["precision", "dependencies", "ask"],
                "type": "string",
                "description": "Type of tracing: 'ask' (default - prompts user to choose mode), 'precision' (execution flow) or 'dependencies' (structural relationships)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in the work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the work"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of files examined during this work step"
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to the issue/goal"
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed after this one"
              },
              "target_description": {
                "type": "string",
                "description": "Detailed description of what to trace and WHY you need this analysis. MUST include context about what you're trying to understand, debug, analyze or find."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__testgen",
          "description": "COMPREHENSIVE TEST GENERATION - Creates thorough test suites with edge case coverage. Use this when you need to generate tests for code, create test scaffolding, or improve test coverage. BE SPECIFIC about scope: target specific functions/classes/modules rather than testing everything. Examples: 'Generate tests for User.login() method', 'Test payment processing validation', 'Create tests for authentication error handling'. If user request is vague, either ask for clarification about specific components to test, or make focused scope decisions and explain them. Analyzes code paths, identifies realistic failure modes, and generates framework-specific tests. Supports test pattern following when examples are provided. Choose thinking_mode based on code complexity: 'low' for simple functions, 'medium' for standard modules (default), 'high' for complex systems with many interactions, 'max' for critical systems requiring exhaustive test coverage. Note: If you're not currently using a top-tier model such as Opus 4 or above, these tools can provide enhanced capabilities.",
          "input_schema": {
            "type": "object",
            "title": "TestgenRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "What to analyze or look for in this step. In step 1, describe what you want to test and begin forming an analytical approach after thinking carefully about what needs to be examined. Consider code structure, business logic, critical paths, edge cases, and potential failure modes. Map out the codebase structure, understand the functionality, and identify areas requiring test coverage. In later steps, continue exploring with precision and adapt your understanding as you uncover more insights about testable behaviors."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, flow charts, or visual documentation that help understand the code structure and test requirements. Only include if they materially assist test planning."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about the code being tested. Include analysis of functionality, critical paths, edge cases, boundary conditions, error handling, async behavior, state management, and integration points. Be specific and avoid vague languageâ€”document what you now know about the code and what test scenarios are needed. IMPORTANT: Document both the happy paths and potential failure modes. Identify existing test patterns if examples were provided. In later steps, confirm or update past findings with additional evidence."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the test generation assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some patterns identified), 'high' (strong understanding), 'certain' (only when the test plan is thoroughly complete and all test scenarios are identified). Do NOT use 'certain' unless the test generation analysis is comprehensively complete, use 'high' instead not 100% sure. Using 'certain' prevents additional expert analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the test generation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the test generation analysis. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the test generation investigation so far. Include even files ruled out or found to be unrelated, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain code directly needing tests or are essential for understanding test requirements. Only list those that are directly tied to the functionality being tested. This could include implementation files, interfaces, dependencies, or existing test examples."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the test generation analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__listmodels",
          "description": "LIST AVAILABLE MODELS - Display all AI models organized by provider. Shows which providers are configured, available models, their aliases, context windows, and capabilities. Useful for understanding what models can be used and their characteristics. MANDATORY: Must display full output to the user.",
          "input_schema": {
            "type": "object",
            "required": [],
            "properties": {}
          }
        },
        {
          "name": "mcp__zen__version",
          "description": "VERSION & CONFIGURATION - Get server version, configuration details, and list of available tools. Useful for debugging and understanding capabilities.",
          "input_schema": {
            "type": "object",
            "required": [],
            "properties": {}
          }
        }
      ],
      "stream": true,
      "system": [
        {
          "text": "You are Claude Code, Anthropic's official CLI for Claude.",
          "type": "text",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools).\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point. When you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface. You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail. Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n1. Doing the right thing when asked, including taking actions and follow-up actions\n2. Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n3. Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite and TodoRead tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nfalse\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /home/crystalin/projects/moonbeam\nIs directory a git repo: Yes\nAdditional working directories: /tmp\nPlatform: linux\nOS Version: Linux 5.15.167.4-microsoft-standard-WSL2\nToday's date: 2025-06-29\n</env>\nYou are powered by the model named Opus 4. The exact model ID is claude-opus-4-20250514.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: master\n\nMain branch (you will usually use this for PRs): master\n\nStatus:\n?? DEBUG.md\n?? LOGGING_TARGETS.md\n?? body.md\n?? jira-cleanup-tracker.md\n?? moonbeam\n?? moonbeam-replay-origin.sh\n?? moonbeam-replay-pov-fix.sh\n?? moonbeam-replay-pov.sh\n?? moonbeam-replay.sh\n?? moonbeam.sh\n?? moonriver-replay.sh\n?? test/configs/zombieAlphanet-44.1-3600.json\n?? test/moonbeam-32.1\n?? test/moonbeam-39\n?? test/moonbeam-44.1\n?? test/scripts/prepare-lazy-loading-new-runtime.ts\n?? test/suites/dev/moonbase/test-balance/test-erc20.ts\n?? test/suites/dev/moonbase/test-extrinsics/\n?? test/suites/lazy-loading/test-storage-override.ts\n?? test/suites/zombie/test_import.ts\n?? tools/test-scripts/test-xcm-recursive-limit.ts\n\nRecent commits:\nafc66a8bbd Re-enable lazy-loading tests (#3312)\ne1915d55b7 fix broken link (#3313)\nd823a7ca6f Add XCM v5 integration tests (#3311)\ne8737e2b81 state_traceBlock: replay the block with proof recording (#3308)\n4a6dd71268 CI: benchmarking improvement (#3310)",
          "type": "text",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ],
      "messages": [
        {
          "role": "user",
          "content": [
            {
              "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n",
              "type": "text"
            },
            {
              "text": "hi",
              "type": "text"
            },
            {
              "text": "<system-reminder>This is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.</system-reminder>",
              "type": "text",
              "cache_control": {
                "type": "ephemeral"
              }
            }
          ]
        }
      ],
      "metadata": {
        "user_id": "claude-1"
      },
      "max_tokens": 32000,
      "temperature": 1
    },
    "response_body": {
      "id": "msg_01HRWSPmvRRYhQgem9gsHoTd",
      "role": "assistant",
      "type": "message",
      "model": "claude-opus-4-20250514",
      "usage": {
        "input_tokens": 4,
        "service_tier": "standard",
        "output_tokens": 32,
        "cache_read_input_tokens": 0,
        "cache_creation_input_tokens": 34852
      },
      "content": [
        {
          "text": "Hello! I'm here to help you with software engineering tasks in your Moonbeam project. What would you like to work on today?",
          "type": "text"
        }
      ],
      "stop_reason": "end_turn",
      "stop_sequence": null
    }
  },
  "child": {
    "request_id": "0a8b4c5f-12b2-4295-9352-70b65cbb94fb",
    "domain": "localhost:3000",
    "body": {
      "model": "claude-opus-4-20250514",
      "tools": [
        {
          "name": "Task",
          "description": "Launch a new agent that has access to the following tools: Bash, Glob, Grep, LS, exit_plan_mode, Read, Edit, MultiEdit, Write, NotebookRead, NotebookEdit, WebFetch, TodoRead, TodoWrite, WebSearch, mcp__perplexity-ask__perplexity_ask, mcp__zen__chat, mcp__zen__thinkdeep, mcp__zen__planner, mcp__zen__consensus, mcp__zen__codereview, mcp__zen__precommit, mcp__zen__debug, mcp__zen__secaudit, mcp__zen__docgen, mcp__zen__analyze, mcp__zen__refactor, mcp__zen__tracer, mcp__zen__testgen, mcp__zen__listmodels, mcp__zen__version, mcp__spark__get_recommendation, mcp__spark__send_feedback, ListMcpResourcesTool, ReadMcpResourceTool. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use the Agent tool to perform the search for you.\n\nWhen to use the Agent tool:\n- If you are searching for a keyword like \"config\" or \"logger\", or for questions like \"which file does X?\", the Agent tool is strongly recommended\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Writing code and running bash commands (use other tools for that)\n- Other tasks that are not related to searching for a keyword or file\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["description", "prompt"],
            "properties": {
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 300000ms / 5 minutes). If not specified, commands will timeout after 300000ms (5 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   ðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   ðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["command"],
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 300000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["pattern"],
            "properties": {
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              },
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Grep",
          "description": "\n- Fast content search tool that works with any codebase size\n- Searches file contents using regular expressions\n- Supports full regex syntax (eg. \"log.*Error\", \"function\\s+\\w+\", etc.)\n- Filter files by pattern with the include parameter (eg. \"*.js\", \"*.{ts,tsx}\")\n- Returns file paths with at least one match sorted by modification time\n- Use this tool when you need to find files containing specific patterns\n- If you need to identify/count the number of matches within files, use the Bash tool with `rg` (ripgrep) directly. Do NOT use `grep`.\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["pattern"],
            "properties": {
              "path": {
                "type": "string",
                "description": "The directory to search in. Defaults to the current working directory."
              },
              "include": {
                "type": "string",
                "description": "File pattern to include in the search (e.g. \"*.js\", \"*.{ts,tsx}\")"
              },
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["path"],
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "exit_plan_mode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode. \nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg. \n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["plan"],
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful. \n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["file_path"],
            "properties": {
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files. \n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file. \n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`. \n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["file_path", "old_string", "new_string"],
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["file_path", "edits"],
            "properties": {
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["old_string", "new_string"],
                  "properties": {
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              },
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["file_path", "content"],
            "properties": {
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              },
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["notebook_path"],
            "properties": {
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              },
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["notebook_path", "new_source"],
            "properties": {
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "cell_type": {
                "enum": ["code", "markdown"],
                "type": "string",
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "enum": ["replace", "insert", "delete"],
                "type": "string",
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["url", "prompt"],
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "TodoRead",
          "description": "Use this tool to read the current to-do list for the session. This tool should be used proactively and frequently to ensure that you are aware of\nthe status of the current task list. You should make use of this tool as often as possible, especially in the following situations:\n- At the beginning of conversations to see what's pending\n- Before starting new tasks to prioritize work\n- When the user asks about previous tasks or plans\n- Whenever you're uncertain about what to do next\n- After completing tasks to update your understanding of remaining work\n- After every few messages to ensure you're on track\n\nUsage:\n- This tool takes in no parameters. So leave the input blank or empty. DO NOT include a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.\n- Returns a list of todo items with their status, priority, and content\n- Use this information to track progress and plan next steps\n- If no todos exist yet, an empty list will be returned",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {},
            "description": "No input is required, leave this field blank. NOTE that we do not require a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.",
            "additionalProperties": true
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["todos"],
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["content", "status", "priority", "id"],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "enum": ["pending", "in_progress", "completed"],
                      "type": "string"
                    },
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "priority": {
                      "enum": ["high", "medium", "low"],
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["query"],
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__perplexity-ask__perplexity_ask",
          "description": "Engages in a conversation using the Sonar API. Accepts an array of messages (each with a role and content) and returns a ask completion response from the Perplexity model.",
          "input_schema": {
            "type": "object",
            "required": ["messages"],
            "properties": {
              "messages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["role", "content"],
                  "properties": {
                    "role": {
                      "type": "string",
                      "description": "Role of the message (e.g., system, user, assistant)"
                    },
                    "content": {
                      "type": "string",
                      "description": "The content of the message"
                    }
                  }
                },
                "description": "Array of conversation messages"
              }
            }
          }
        },
        {
          "name": "mcp__zen__chat",
          "description": "GENERAL CHAT & COLLABORATIVE THINKING - Use the AI model as your thinking partner! Perfect for: bouncing ideas during your own analysis, getting second opinions on your plans, collaborative brainstorming, validating your checklists and approaches, exploring alternatives. Also great for: explanations, comparisons, general development questions. Use this when you want to ask questions, brainstorm ideas, get opinions, discuss topics, share your thinking, or need explanations about concepts and approaches. Note: If you're not currently using a top-tier model such as Opus 4 or above, these tools can provide enhanced capabilities.",
          "input_schema": {
            "type": "object",
            "required": ["prompt", "model"],
            "properties": {
              "files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional files for context (must be FULL absolute paths to real files / folders - DO NOT SHORTEN)"
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional images for visual context. Useful for UI discussions, diagrams, visual problems, error screens, or architectural mockups. (must be FULL absolute paths to real files / folders - DO NOT SHORTEN - OR these can be bas64 data)"
              },
              "prompt": {
                "type": "string",
                "description": "You MUST provide a thorough, expressive question or share an idea with as much context as possible. Remember: you're talking to an assistant who has deep expertise and can provide nuanced insights. Include your current thinking, specific challenges, background context, what you've already tried, and what kind of response would be most helpful. The more context and detail you provide, the more valuable and targeted the response will be."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Response creativity (0-1, default 0.5)"
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max)"
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. Can be used to continue conversations across different tools. Only provide this if continuing a previous conversation thread."
              }
            }
          }
        },
        {
          "name": "mcp__zen__thinkdeep",
          "description": "COMPREHENSIVE INVESTIGATION & REASONING - Multi-stage workflow for complex problem analysis. Use this when you need structured evidence-based investigation, systematic hypothesis testing, or expert validation. Perfect for: architecture decisions, complex bugs, performance challenges, security analysis. Provides methodical investigation with assumption validation, alternative solution exploration, and rigorous analysis. IMPORTANT: Choose the appropriate mode based on task complexity - 'low' for quick investigation, 'medium' for standard problems, 'high' for complex issues (default), 'max' for extremely complex challenges requiring exhaustive investigation. When in doubt, err on the side of a higher mode for thorough systematic analysis and expert validation. Note: If you're not currently using a top-tier model such as Opus 4 or above, these tools can provide enhanced capabilities.",
          "input_schema": {
            "type": "object",
            "title": "ThinkdeepRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional image(s) for visual context. Accepts absolute file paths or base64 data URLs. Only provide when user explicitly mentions images. When including images, please describe what you believe each image contains to aid with contextual understanding. Useful for UI discussions, diagrams, visual problems, error screens, architecture mockups, and visual analysis tasks."
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step of the work"
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Confidence level in findings: exploring, low, medium, high, certain"
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "focus_areas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific aspects to focus on (architecture, performance, security, etc.)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in the work sequence (starts at 1)"
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the work"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of files examined during this work step"
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to the issue/goal"
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "problem_context": {
                "type": "string",
                "description": "Provide additional context about the problem or goal. Be as expressive as possible. More information will be very helpful for the analysis."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed after this one"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "Step number to backtrack from if work needs revision"
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__planner",
          "description": "INTERACTIVE SEQUENTIAL PLANNER - Break down complex tasks through step-by-step planning. This tool enables you to think sequentially, building plans incrementally with the ability to revise, branch, and adapt as understanding deepens.\n\nHow it works:\n- Start with step 1: describe the task/problem to plan\n- Continue with subsequent steps, building the plan piece by piece\n- Adjust total_steps estimate as you progress\n- Revise previous steps when new insights emerge\n- Branch into alternative approaches when needed\n- Add more steps even after reaching the initial estimate\n\nKey features:\n- Sequential thinking with full context awareness\n- Forced deep reflection for complex plans (â‰¥5 steps) in early stages\n- Branching for exploring alternative strategies\n- Revision capabilities to update earlier decisions\n- Dynamic step count adjustment\n\nENHANCED: For complex plans (â‰¥5 steps), the first 3 steps enforce deep thinking pauses\nto prevent surface-level planning and ensure thorough consideration of alternatives,\ndependencies, and strategic decisions before moving to tactical details.\n\nPerfect for: complex project planning, system design with unknowns, migration strategies, architectural decisions, problem decomposition.",
          "input_schema": {
            "type": "object",
            "title": "PlannerRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["step", "step_number", "total_steps", "next_step_required", "model"],
            "properties": {
              "step": {
                "type": "string",
                "description": "Your current planning step. For the first step, describe the task/problem to plan and be extremely expressive so that subsequent steps can break this down into simpler steps. For subsequent steps, provide the actual planning step content. Can include: regular planning steps, revisions of previous steps, questions about previous decisions, realizations about needing more analysis, changes in approach, etc."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "branch_id": {
                "type": "string",
                "description": "Identifier for the current branch (e.g., 'approach-A', 'microservices-path')"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in the work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the work"
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "is_branch_point": {
                "type": "boolean",
                "description": "True if this step branches from a previous step to explore alternatives"
              },
              "branch_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If is_branch_point is true, which step number is the branching point"
              },
              "is_step_revision": {
                "type": "boolean",
                "description": "True if this step revises/replaces a previous step"
              },
              "more_steps_needed": {
                "type": "boolean",
                "description": "True if more steps are needed beyond the initial estimate"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed after this one"
              },
              "revises_step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "If is_step_revision is true, which step number is being revised"
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__consensus",
          "description": "COMPREHENSIVE CONSENSUS WORKFLOW - Step-by-step multi-model consensus with structured analysis. This tool guides you through a systematic process where you:\n\n1. Start with step 1: provide your own neutral analysis of the proposal\n2. The tool will then consult each specified model one by one\n3. You'll receive each model's response in subsequent steps\n4. Track and synthesize perspectives as they accumulate\n5. Final step: present comprehensive consensus and recommendations\n\nIMPORTANT: This workflow enforces sequential model consultation:\n- Step 1 is always your independent analysis\n- Each subsequent step processes one model response\n- Total steps = number of models (each step includes consultation + response)\n- Models can have stances (for/against/neutral) for structured debate\n- Same model can be used multiple times with different stances\n- Each model + stance combination must be unique\n\nPerfect for: complex decisions, architectural choices, feature proposals, technology evaluations, strategic planning.",
          "input_schema": {
            "type": "object",
            "title": "ConsensusRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe your current consensus analysis step. In step 1, provide your own neutral, balanced analysis of the proposal/idea/plan after thinking carefully about all aspects. Consider technical feasibility, user value, implementation complexity, and alternatives. In subsequent steps (2+), you will receive individual model responses to synthesize. CRITICAL: Be thorough and balanced in your initial assessment, considering both benefits and risks, opportunities and challenges."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of image paths or base64 data URLs for visual context. Useful for UI/UX discussions, architecture diagrams, mockups, or any visual references that help inform the consensus analysis."
              },
              "models": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["model"],
                  "properties": {
                    "model": {
                      "type": "string"
                    },
                    "stance": {
                      "enum": ["for", "against", "neutral"],
                      "type": "string",
                      "default": "neutral"
                    },
                    "stance_prompt": {
                      "type": "string"
                    }
                  }
                },
                "description": "List of model configurations to consult. Each can have a model name, stance (for/against/neutral), and optional custom stance prompt. The same model can be used multiple times with different stances, but each model + stance combination must be unique. Example: [{'model': 'o3', 'stance': 'for'}, {'model': 'o3', 'stance': 'against'}, {'model': 'flash', 'stance': 'neutral'}]"
              },
              "findings": {
                "type": "string",
                "description": "In step 1, provide your comprehensive analysis of the proposal. In steps 2+, summarize the key points from the model response received, noting agreements and disagreements with previous analyses."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the consensus workflow, beginning at 1. Step 1 is your analysis, steps 2+ are for processing individual model responses."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Total number of steps needed. This equals the number of models to consult. Step 1 includes your analysis + first model consultation on return of the call. Final step includes last model consultation + synthesis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files that are relevant to the consensus analysis. Include files that help understand the proposal, provide context, or contain implementation details."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "model_responses": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Accumulated responses from models consulted so far. Internal field for tracking progress."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if more models need to be consulted. False when ready for final synthesis."
              },
              "current_model_index": {
                "type": "integer",
                "minimum": 0,
                "description": "Internal tracking of which model is being consulted (0-based index). Used to determine which model to call next."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__codereview",
          "description": "COMPREHENSIVE CODE REVIEW WORKFLOW - Step-by-step code review with expert analysis. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your code review investigation plan\n2. STOP and investigate code structure, patterns, and potential issues\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and issues throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive code review, security audits, performance analysis, architectural assessment, code quality evaluation, anti-pattern detection.",
          "input_schema": {
            "type": "object",
            "title": "CodereviewRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating for code review by thinking deeply about the code structure, patterns, and potential issues. In step 1, clearly state your review plan and begin forming a systematic approach after thinking carefully about what needs to be analyzed. You must begin by passing the file path for the initial code you are about to review in relevant_files. CRITICAL: Remember to thoroughly examine code quality, security implications, performance concerns, and architectural patterns. Consider not only obvious bugs and issues but also subtle concerns like over-engineering, unnecessary complexity, design patterns that could be simplified, areas where architecture might not scale well, missing abstractions, and ways to reduce complexity while maintaining functionality. Map out the codebase structure, understand the business logic, and identify areas requiring deeper analysis. In all later steps, continue exploring with precision: trace dependencies, verify assumptions, and adapt your understanding as you uncover more evidence."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, UI mockups, design documents, or visual references that help with code review context. Only include if they materially assist understanding or assessment."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about the code being reviewed. Include analysis of code quality, security concerns, performance issues, architectural patterns, design decisions, potential bugs, code smells, and maintainability considerations. Be specific and avoid vague languageâ€”document what you now know about the code and how it affects your assessment. IMPORTANT: Document both positive findings (good patterns, proper implementations, well-designed components) and concerns (potential issues, anti-patterns, security risks, performance bottlenecks). In later steps, confirm or update past findings with additional evidence."
              },
              "focus_on": {
                "type": "string",
                "description": "Specific aspects to focus on or additional context that would help understand areas of concern"
              },
              "standards": {
                "type": "string",
                "description": "Coding standards to enforce during the review"
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the code review assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some evidence gathered), 'high' (strong evidence), 'certain' (only when the code review is thoroughly complete and all significant issues are identified). Do NOT use 'certain' unless the code review is comprehensively complete, use 'high' instead not 100% sure. Using 'certain' prevents additional expert analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "review_type": {
                "enum": ["full", "security", "performance", "quick"],
                "type": "string",
                "default": "full",
                "description": "Type of review to perform (full, security, performance, quick)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the code review sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the code review. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of issues identified during the investigation. Each issue should be a dictionary with 'severity' (critical, high, medium, low) and 'description' fields. Include security vulnerabilities, performance bottlenecks, code quality issues, architectural concerns, maintainability problems, over-engineering, unnecessary complexity, etc."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the code review investigation so far. Include even files ruled out or found to be unrelated, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "For when this is the first step, please pass absolute file paths of relevant code to review (do not clip file paths). When used for the final step, this contains a subset of files_checked (as full absolute paths) that contain code directly relevant to the review or contain significant issues, patterns, or examples worth highlighting. Only list those that are directly tied to important findings, security concerns, performance issues, or architectural decisions. This could include core implementation files, configuration files, or files with notable patterns."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "severity_filter": {
                "enum": ["critical", "high", "medium", "low", "all"],
                "type": "string",
                "default": "all",
                "description": "Minimum severity level to report on the issues found"
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the code review analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__precommit",
          "description": "COMPREHENSIVE PRECOMMIT WORKFLOW - Step-by-step pre-commit validation with expert analysis. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your pre-commit validation plan\n2. STOP and investigate git changes, repository status, and file modifications\n3. Report findings in step 2 with concrete evidence from actual changes\n4. Continue investigating between each step\n5. Track findings, relevant files, and issues throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from git analysis\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive pre-commit validation, multi-repository analysis, security review, change impact assessment, completeness verification.",
          "input_schema": {
            "type": "object",
            "title": "PrecommitRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "path": {
                "type": "string",
                "description": "Starting absolute path to the directory to search for git repositories (must be FULL absolute paths - DO NOT SHORTEN)."
              },
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating for pre-commit validation by thinking deeply about the changes and their potential impact. In step 1, clearly state your investigation plan and begin forming a systematic approach after thinking carefully about what needs to be validated. CRITICAL: Remember to thoroughly examine all git repositories, staged/unstaged changes, and understand the scope and intent of modifications. Consider not only immediate correctness but also potential future consequences, security implications, performance impacts, and maintainability concerns. Map out changed files, understand the business logic, and identify areas requiring deeper analysis. In all later steps, continue exploring with precision: trace dependencies, verify hypotheses, and adapt your understanding as you uncover more evidence."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to screenshots, UI mockups, or visual references that help validate the changes. Only include if they materially assist understanding or assessment of the commit."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about the changes being committed. Include analysis of git diffs, file modifications, new functionality, potential issues identified, code quality observations, and security considerations. Be specific and avoid vague languageâ€”document what you now know about the changes and how they affect your assessment. IMPORTANT: Document both positive findings (good patterns, proper implementations) and concerns (potential bugs, missing tests, security risks). In later steps, confirm or update past findings with additional evidence."
              },
              "focus_on": {
                "type": "string",
                "description": "Specific aspects to focus on (e.g., 'security implications', 'performance impact', 'test coverage')."
              },
              "compare_to": {
                "type": "string",
                "description": "Optional: A git ref (branch, tag, commit hash) to compare against. Check remote branches if local does not exist.If not provided, investigates local staged and unstaged changes."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some evidence gathered), 'high' (strong evidence), 'certain' (only when the analysis is complete and all issues are identified). Do NOT use 'certain' unless the pre-commit validation is thoroughly complete, use 'high' instead not 100% sure. Using 'certain' prevents additional expert analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the pre-commit investigation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the pre-commit investigation. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of issues identified during the investigation. Each issue should be a dictionary with 'severity' (critical, high, medium, low) and 'description' fields. Include potential bugs, security concerns, performance issues, missing tests, incomplete implementations, etc."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the pre-commit investigation so far. Include even files ruled out or found to be unchanged, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "include_staged": {
                "type": "boolean",
                "default": true,
                "description": "Include staged changes in the investigation. Only applies if 'compare_to' is not set."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain changes or are directly relevant to the commit validation. Only list those that are directly tied to the changes being committed, their dependencies, or files that need validation. This could include modified files, related configuration, tests, or documentation."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "severity_filter": {
                "enum": ["critical", "high", "medium", "low", "all"],
                "type": "string",
                "default": "all",
                "description": "Minimum severity level to report on the changes."
              },
              "include_unstaged": {
                "type": "boolean",
                "default": true,
                "description": "Include uncommitted (unstaged) changes in the investigation. Only applies if 'compare_to' is not set."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the pre-commit analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__debug",
          "description": "DEBUG & ROOT CAUSE ANALYSIS - Systematic self-investigation followed by expert analysis. This tool guides you through a step-by-step investigation process where you:\n\n1. Start with step 1: describe the issue to investigate\n2. STOP and investigate using appropriate tools\n3. Report findings in step 2 with concrete evidence from actual code\n4. Continue investigating between each debug step\n5. Track findings, relevant files, and methods throughout\n6. Update hypotheses as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each debug call, you MUST investigate before calling debug again\n- Each step must include NEW evidence from code examination\n- No recursive debug calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: complex bugs, mysterious errors, performance issues, race conditions, memory leaks, integration problems.",
          "input_schema": {
            "type": "object",
            "title": "DebugRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating by thinking deeply about the issue and its possible causes. In step 1, clearly state the issue and begin forming an investigative direction after thinking carefullyabout the described problem. Ask further questions from the user if you think these will help with yourunderstanding and investigation. CRITICAL: Remember that reported symptoms might originate from code far from where they manifest. Also be aware that after thorough investigation, you might find NO BUG EXISTS - it could be a misunderstanding or expectation mismatch. Consider not only obvious failures, but also subtle contributing factors like upstream logic, invalid inputs, missing preconditions, or hidden side effects. Map out the flow of related functions or modules. Identify call paths where input values or branching logic could cause instability. In concurrent systems, watch for race conditions, shared state, or timing dependencies. In all later steps, continue exploring with precision: trace deeper dependencies, verify hypotheses, and adapt your understanding as you uncover more evidence."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to screenshots or UI visuals that clarify the issue. Only include if they materially assist understanding or hypothesis formulation."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step. Include new clues, unexpected behavior, evidence from code or logs, or disproven theories. Be specific and avoid vague languageâ€”document what you now know and how it affects your hypothesis. IMPORTANT: If you find no evidence supporting the reported issue after thorough investigation, document this clearly. Finding 'no bug' is a valid outcome if the investigation was comprehensive. In later steps, confirm or disprove past findings with reason."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the hypothesis. Use: 'exploring' (starting out), 'low' (early idea), 'medium' (some supporting evidence), 'high' (strong evidence), 'certain' (only when the root cause and minimal fix are both confirmed). Do NOT use 'certain' unless the issue can be fully resolved with a fix, use 'high' instead when not 100% sure. Using 'certain' prevents you from taking assistance from another thought-partner."
              },
              "hypothesis": {
                "type": "string",
                "description": "A concrete theory for what's causing the issue based on the evidence so far. This can include suspected failures, incorrect assumptions, or violated constraints. VALID HYPOTHESES INCLUDE: 'No bug found - possible user misunderstanding' or 'Symptoms appear unrelated to any code issue' if evidence supports this. When no bug is found, consider suggesting: 'Recommend discussing with thought partner/engineering assistant for clarification of expected behavior.' You are encouraged to revise or abandon hypotheses in later steps as needed based on evidence."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the investigation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the investigation. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the investigation so far. Include even files ruled out, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain code directly relevant to the issue. Only list those that are directly tied to the root cause or its effects. This could include the cause, trigger, or place of manifestation."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the root cause is known or the investigation is complete."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or hypothesis needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__secaudit",
          "description": "COMPREHENSIVE SECURITY AUDIT WORKFLOW - Step-by-step security assessment with expert analysis. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your security investigation plan\n2. STOP and investigate code structure, patterns, and security issues\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and security issues throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert security analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive security assessment, OWASP Top 10 analysis, compliance evaluation, vulnerability identification, threat modeling, security architecture review.",
          "input_schema": {
            "type": "object",
            "title": "SecauditRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating for security audit by thinking deeply about security implications, threat vectors, and protection mechanisms. In step 1, clearly state your security audit plan and begin forming a systematic approach after identifying the application type, technology stack, and relevant security requirements. You must begin by passing the file path for the initial code you are about to audit in relevant_files. CRITICAL: Follow the OWASP Top 10 systematic checklist, examine authentication/authorization mechanisms, analyze input validation and data handling, assess dependency vulnerabilities, and evaluate infrastructure security. Consider not only obvious vulnerabilities but also subtle security gaps, configuration issues, design flaws, and compliance requirements. Map out the attack surface, understand the threat landscape, and identify areas requiring deeper security analysis. In all later steps, continue exploring with precision: trace security dependencies, verify security assumptions, and adapt your understanding as you uncover security evidence."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, security models, threat models, or visual references that help with security audit context. Only include if they materially assist understanding or assessment of security posture."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about security aspects of the code being audited. Include analysis of security vulnerabilities, authentication/authorization issues, input validation gaps, encryption weaknesses, configuration problems, and compliance concerns. Be specific and avoid vague languageâ€”document what you now know about the security posture and how it affects your assessment. IMPORTANT: Document both positive security findings (proper implementations, good security practices) and concerns (vulnerabilities, security gaps, compliance issues). In later steps, confirm or update past findings with additional evidence."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the security audit assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some evidence gathered), 'high' (strong evidence), 'certain' (only when the security audit is thoroughly complete and all significant security issues are identified). Do NOT use 'certain' unless the security audit is comprehensively complete, use 'high' instead not 100% sure. Using 'certain' prevents additional expert analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "audit_focus": {
                "enum": ["owasp", "compliance", "infrastructure", "dependencies", "comprehensive"],
                "type": "string",
                "default": "comprehensive",
                "description": "Primary security focus areas for this audit (owasp, compliance, infrastructure, dependencies)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the security audit sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the security audit. Adjust and increase as new security findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of security issues identified during the investigation. Each issue should be a dictionary with 'severity' (critical, high, medium, low) and 'description' fields. Include security vulnerabilities, authentication bypasses, authorization flaws, injection vulnerabilities, cryptographic weaknesses, configuration issues, compliance gaps, etc."
              },
              "threat_level": {
                "enum": ["low", "medium", "high", "critical"],
                "type": "string",
                "default": "medium",
                "description": "Assess the threat level based on application context: 'low' (internal tools, low-risk data), 'medium' (customer-facing, business data), 'high' (financial, healthcare, regulated industry), 'critical' (payment processing, sensitive personal data). This guides prioritization."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the security audit investigation so far. Include even files ruled out or found to be unrelated, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "For when this is the first step, please pass absolute file paths of relevant code to audit (do not clip file paths). When used for the final step, this contains a subset of files_checked (as full absolute paths) that contain code directly relevant to the security audit or contain significant security issues, patterns, or examples worth highlighting. Only list those that are directly tied to important security findings, vulnerabilities, authentication issues, or security architectural decisions. This could include authentication modules, input validation files, configuration files, or files with notable security patterns."
              },
              "security_scope": {
                "type": "string",
                "description": "Define the security scope and application context (web app, mobile app, API, enterprise system, cloud service). Include technology stack, user types, data sensitivity, and threat landscape. This helps focus the security assessment appropriately."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "severity_filter": {
                "enum": ["critical", "high", "medium", "low", "all"],
                "type": "string",
                "default": "all",
                "description": "Minimum severity level to report on the security issues found"
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the security audit analysis is complete and ALL threats have been uncovered, ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "compliance_requirements": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List applicable compliance frameworks and security standards (SOC2, PCI DSS, HIPAA, GDPR, ISO 27001, NIST). Include industry-specific requirements that affect security controls."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__docgen",
          "description": "COMPREHENSIVE DOCUMENTATION GENERATION - Step-by-step code documentation with expert analysis. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your documentation investigation plan\n2. STOP and investigate code structure, patterns, and documentation needs\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and documentation opportunities throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive documentation generation, code documentation analysis, complexity assessment, documentation modernization, API documentation.",
          "input_schema": {
            "type": "object",
            "title": "DocgenRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "document_complexity",
              "document_flow",
              "update_existing",
              "comments_on_complex_logic",
              "num_files_documented",
              "total_files_to_document"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step of the work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in the work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the work"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "document_flow": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include call flow and dependency information in documentation. Default: true. When enabled, documents which methods this function calls and which methods call this function."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to the issue/goal"
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "update_existing": {
                "type": "boolean",
                "default": true,
                "description": "Whether to update existing documentation when it's found to be incorrect or incomplete. Default: true. When enabled, improves existing docs rather than just adding new ones."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed after this one"
              },
              "document_complexity": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include algorithmic complexity (Big O) analysis in function/method documentation. Default: true. When enabled, analyzes and documents the computational complexity of algorithms."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "num_files_documented": {
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "description": "CRITICAL COUNTER: Number of files you have COMPLETELY documented so far. Start at 0. Increment by 1 only when a file is 100% documented (all functions/methods have documentation). This counter prevents premature completion - you CANNOT set next_step_required=false unless num_files_documented equals total_files_to_document."
              },
              "total_files_to_document": {
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "description": "CRITICAL COUNTER: Total number of files discovered that need documentation in current directory. Set this in step 1 after discovering all files. This is the target number - when num_files_documented reaches this number, then and ONLY then can you set next_step_required=false. This prevents stopping after documenting just one file."
              },
              "comments_on_complex_logic": {
                "type": "boolean",
                "default": true,
                "description": "Whether to add inline comments around complex logic within functions. Default: true. When enabled, adds explanatory comments for non-obvious algorithmic steps."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__analyze",
          "description": "COMPREHENSIVE ANALYSIS WORKFLOW - Step-by-step code analysis with expert validation. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your analysis investigation plan\n2. STOP and investigate code structure, patterns, and architectural decisions\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and insights throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, always receive expert validation\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive code analysis, architectural assessment, performance evaluation, security analysis, maintainability review, pattern detection, strategic planning.",
          "input_schema": {
            "type": "object",
            "title": "AnalyzeRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "What to analyze or look for in this step. In step 1, describe what you want to analyze and begin forming an analytical approach after thinking carefully about what needs to be examined. Consider code quality, performance implications, architectural patterns, and design decisions. Map out the codebase structure, understand the business logic, and identify areas requiring deeper analysis. In later steps, continue exploring with precision and adapt your understanding as you uncover more insights."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, design documents, or visual references that help with analysis context. Only include if they materially assist understanding or assessment."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about the code being analyzed. Include analysis of architectural patterns, design decisions, tech stack assessment, scalability characteristics, performance implications, maintainability factors, security posture, and strategic improvement opportunities. Be specific and avoid vague languageâ€”document what you now know about the codebase and how it affects your assessment. IMPORTANT: Document both strengths (good patterns, solid architecture, well-designed components) and concerns (tech debt, scalability risks, overengineering, unnecessary complexity). In later steps, confirm or update past findings with additional evidence."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Your confidence level in the current analysis findings: exploring (early investigation), low (some insights but more needed), medium (solid understanding), high (comprehensive insights), certain (complete analysis ready for expert validation)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the analysis sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the analysis. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues or concerns identified during analysis, each with severity level (critical, high, medium, low)"
              },
              "analysis_type": {
                "enum": ["architecture", "performance", "security", "quality", "general"],
                "type": "string",
                "default": "general",
                "description": "Type of analysis to perform (architecture, performance, security, quality, general)"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the analysis investigation so far. Include even files ruled out or found to be unrelated, as this tracks your exploration path."
              },
              "output_format": {
                "enum": ["summary", "detailed", "actionable"],
                "type": "string",
                "default": "detailed",
                "description": "How to format the output (summary, detailed, actionable)"
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain code directly relevant to the analysis or contain significant patterns, architectural decisions, or examples worth highlighting. Only list those that are directly tied to important findings, architectural insights, performance characteristics, or strategic improvement opportunities. This could include core implementation files, configuration files, or files demonstrating key patterns."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__refactor",
          "description": "COMPREHENSIVE REFACTORING WORKFLOW - Step-by-step refactoring analysis with expert validation. This tool guides you through a systematic investigation process where you:\n\n1. Start with step 1: describe your refactoring investigation plan\n2. STOP and investigate code structure, patterns, and potential improvements\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and refactoring opportunities throughout\n6. Update assessments as understanding evolves\n7. Once investigation is complete, receive expert analysis\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nPerfect for: comprehensive refactoring analysis, code smell detection, decomposition planning, modernization opportunities, organization improvements, maintainability enhancements.",
          "input_schema": {
            "type": "object",
            "title": "RefactorRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Describe what you're currently investigating for refactoring by thinking deeply about the code structure, patterns, and potential improvements. In step 1, clearly state your refactoring investigation plan and begin forming a systematic approach after thinking carefully about what needs to be analyzed. CRITICAL: Remember to thoroughly examine code quality, performance implications, maintainability concerns, and architectural patterns. Consider not only obvious code smells and issues but also opportunities for decomposition, modernization, organization improvements, and ways to reduce complexity while maintaining functionality. Map out the codebase structure, understand the business logic, and identify areas requiring refactoring. In all later steps, continue exploring with precision: trace dependencies, verify assumptions, and adapt your understanding as you uncover more refactoring opportunities."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, UI mockups, design documents, or visual references that help with refactoring context. Only include if they materially assist understanding or assessment."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about refactoring opportunities in the code. Include analysis of code smells, decomposition opportunities, modernization possibilities, organization improvements, architectural patterns, design decisions, potential performance optimizations, and maintainability enhancements. Be specific and avoid vague languageâ€”document what you now know about the code and how it could be improved. IMPORTANT: Document both positive aspects (good patterns, well-designed components) and improvement opportunities (code smells, overly complex functions, outdated patterns, organization issues). In later steps, confirm or update past findings with additional evidence."
              },
              "confidence": {
                "enum": ["exploring", "incomplete", "partial", "complete"],
                "type": "string",
                "default": "incomplete",
                "description": "Indicate your current confidence in the refactoring analysis completeness. Use: 'exploring' (starting analysis), 'incomplete' (just started or significant work remaining), 'partial' (some refactoring opportunities identified but more analysis needed), 'complete' (comprehensive refactoring analysis finished with all major opportunities identified and Claude can handle 100% confidently without help). Use 'complete' ONLY when you have fully analyzed all code, identified all significant refactoring opportunities, and can provide comprehensive recommendations without expert assistance. When files are too large to read fully or analysis is uncertain, use 'partial'. Using 'complete' prevents expert analysis to save time and money."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "focus_areas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific areas to focus on (e.g., 'performance', 'readability', 'maintainability', 'security')"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the refactoring investigation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the refactoring investigation. Adjust as new opportunities emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of refactoring opportunities identified during the investigation. Each opportunity should be a dictionary with 'severity' (critical, high, medium, low), 'type' (codesmells, decompose, modernize, organization), and 'description' fields. Include code smells, decomposition opportunities, modernization possibilities, organization improvements, performance optimizations, maintainability enhancements, etc."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the refactoring investigation so far. Include even files ruled out or found to need no refactoring, as this tracks your exploration path."
              },
              "refactor_type": {
                "enum": ["codesmells", "decompose", "modernize", "organization"],
                "type": "string",
                "default": "codesmells",
                "description": "Type of refactoring analysis to perform (codesmells, decompose, modernize, organization)"
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain code requiring refactoring or are directly relevant to the refactoring opportunities identified. Only list those that are directly tied to specific refactoring opportunities, code smells, decomposition needs, or improvement areas. This could include files with code smells, overly large functions/classes, outdated patterns, or organization issues."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the refactoring analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "style_guide_examples": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional existing code files to use as style/pattern reference (must be FULL absolute paths to real files / folders - DO NOT SHORTEN). These files represent the target coding style and patterns for the project."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__tracer",
          "description": "STEP-BY-STEP CODE TRACING WORKFLOW - Systematic code analysis through guided investigation. This tool guides you through a structured investigation process where you:\n\n1. Start with step 1: describe your tracing plan and target\n2. STOP and investigate code structure, patterns, and relationships\n3. Report findings in step 2 with concrete evidence from actual code analysis\n4. Continue investigating between each step\n5. Track findings, relevant files, and code relationships throughout\n6. Build comprehensive understanding as analysis evolves\n7. Complete with detailed output formatted according to trace mode\n\nIMPORTANT: This tool enforces investigation between steps:\n- After each call, you MUST investigate before calling again\n- Each step must include NEW evidence from code examination\n- No recursive calls without actual investigation work\n- The tool will specify which step number to use next\n- Follow the required_actions list for investigation guidance\n\nTRACE MODES:\n- 'ask': Default mode - prompts you to choose between precision or dependencies modes with explanations\n- 'precision': For methods/functions - traces execution flow, call chains, and usage patterns\n- 'dependencies': For classes/modules - maps structural relationships and bidirectional dependencies\n\nPerfect for: method execution flow analysis, dependency mapping, call chain tracing, structural relationship analysis, architectural understanding, code comprehension.",
          "input_schema": {
            "type": "object",
            "title": "TracerRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "target_description",
              "trace_mode",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional images of system architecture diagrams, flow charts, or visual references to help understand the tracing context"
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step of the work"
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Confidence level in findings: exploring, low, medium, high, certain"
              },
              "trace_mode": {
                "enum": ["precision", "dependencies", "ask"],
                "type": "string",
                "description": "Type of tracing: 'ask' (default - prompts user to choose mode), 'precision' (execution flow) or 'dependencies' (structural relationships)"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in the work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the work"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of files examined during this work step"
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to the issue/goal"
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed after this one"
              },
              "target_description": {
                "type": "string",
                "description": "Detailed description of what to trace and WHY you need this analysis. MUST include context about what you're trying to understand, debug, analyze or find."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__testgen",
          "description": "COMPREHENSIVE TEST GENERATION - Creates thorough test suites with edge case coverage. Use this when you need to generate tests for code, create test scaffolding, or improve test coverage. BE SPECIFIC about scope: target specific functions/classes/modules rather than testing everything. Examples: 'Generate tests for User.login() method', 'Test payment processing validation', 'Create tests for authentication error handling'. If user request is vague, either ask for clarification about specific components to test, or make focused scope decisions and explain them. Analyzes code paths, identifies realistic failure modes, and generates framework-specific tests. Supports test pattern following when examples are provided. Choose thinking_mode based on code complexity: 'low' for simple functions, 'medium' for standard modules (default), 'high' for complex systems with many interactions, 'max' for critical systems requiring exhaustive test coverage. Note: If you're not currently using a top-tier model such as Opus 4 or above, these tools can provide enhanced capabilities.",
          "input_schema": {
            "type": "object",
            "title": "TestgenRequest",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "properties": {
              "step": {
                "type": "string",
                "description": "What to analyze or look for in this step. In step 1, describe what you want to test and begin forming an analytical approach after thinking carefully about what needs to be examined. Consider code structure, business logic, critical paths, edge cases, and potential failure modes. Map out the codebase structure, understand the functionality, and identify areas requiring test coverage. In later steps, continue exploring with precision and adapt your understanding as you uncover more insights about testable behaviors."
              },
              "model": {
                "enum": ["o3"],
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis"
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, flow charts, or visual documentation that help understand the code structure and test requirements. Only include if they materially assist test planning."
              },
              "findings": {
                "type": "string",
                "description": "Summarize everything discovered in this step about the code being tested. Include analysis of functionality, critical paths, edge cases, boundary conditions, error handling, async behavior, state management, and integration points. Be specific and avoid vague languageâ€”document what you now know about the code and what test scenarios are needed. IMPORTANT: Document both the happy paths and potential failure modes. Identify existing test patterns if examples were provided. In later steps, confirm or update past findings with additional evidence."
              },
              "confidence": {
                "enum": ["exploring", "low", "medium", "high", "certain"],
                "type": "string",
                "description": "Indicate your current confidence in the test generation assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some patterns identified), 'high' (strong understanding), 'certain' (only when the test plan is thoroughly complete and all test scenarios are identified). Do NOT use 'certain' unless the test generation analysis is comprehensively complete, use 'high' instead not 100% sure. Using 'certain' prevents additional expert analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about the issue/goal based on work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the test generation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "temperature": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Temperature for response (0.0 to 1.0). Lower values are more focused and deterministic, higher values are more creative. Tool-specific defaults apply if not specified."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the test generation analysis. Adjust as new findings emerge."
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files (as absolute paths, do not clip or shrink file names) examined during the test generation investigation so far. Include even files ruled out or found to be unrelated, as this tracks your exploration path."
              },
              "thinking_mode": {
                "enum": ["minimal", "low", "medium", "high", "max"],
                "type": "string",
                "description": "Thinking depth: minimal (0.5% of model max), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes enable deeper reasoning at the cost of speed."
              },
              "use_websearch": {
                "type": "boolean",
                "default": true,
                "description": "Enable web search for documentation, best practices, and current information. When enabled, the model can request Claude to perform web searches and share results back during conversations. Particularly useful for: brainstorming sessions, architectural design discussions, exploring industry best practices, working with specific frameworks/technologies, researching solutions to complex problems, or when current documentation and community insights would enhance the analysis."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked (as full absolute paths) that contain code directly needing tests or are essential for understanding test requirements. Only list those that are directly tied to the functionality being tested. This could include implementation files, interfaces, dependencies, or existing test examples."
              },
              "continuation_id": {
                "type": "string",
                "description": "Thread continuation ID for multi-turn conversations. When provided, the complete conversation history is automatically embedded as context. Your response should build upon this history without repeating previous analysis or instructions. Focus on providing only new insights, additional findings, or answers to follow-up questions. Can be used across different tools."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the test generation analysis is complete and ready for expert validation."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding or assessment needs to be revised or discarded, specify the step number from which to start over. Use this to acknowledge investigative dead ends and correct the course."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use assistant model for expert analysis after completing the workflow steps. Set to False to skip expert analysis and rely solely on Claude's investigation. Defaults to True for comprehensive validation."
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "mcp__zen__listmodels",
          "description": "LIST AVAILABLE MODELS - Display all AI models organized by provider. Shows which providers are configured, available models, their aliases, context windows, and capabilities. Useful for understanding what models can be used and their characteristics. MANDATORY: Must display full output to the user.",
          "input_schema": {
            "type": "object",
            "required": [],
            "properties": {}
          }
        },
        {
          "name": "mcp__zen__version",
          "description": "VERSION & CONFIGURATION - Get server version, configuration details, and list of available tools. Useful for debugging and understanding capabilities.",
          "input_schema": {
            "type": "object",
            "required": [],
            "properties": {}
          }
        },
        {
          "name": "mcp__spark__get_recommendation",
          "description": "Get a technical recommendation including source documentation and other implementation guidelines.",
          "input_schema": {
            "type": "object",
            "$defs": {
              "Intent": {
                "type": "object",
                "title": "Intent",
                "required": ["query"],
                "properties": {
                  "query": {
                    "type": "string",
                    "title": "Query",
                    "description": "An intent query from the user such as a command, statement, or a question."
                  },
                  "context": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Context",
                    "default": null,
                    "description": "The context of the user intent."
                  }
                },
                "description": "A user intent to be processed by the AI solving system.",
                "additionalProperties": false
              }
            },
            "title": "get_recommendationArguments",
            "required": ["request"],
            "properties": {
              "request": {
                "$ref": "#/$defs/Intent"
              }
            }
          }
        },
        {
          "name": "mcp__spark__send_feedback",
          "description": "Send a structured feedback report to improve the quality of the recommendations and the underlying sources of documentation.",
          "input_schema": {
            "type": "object",
            "$defs": {
              "Lesson": {
                "type": "object",
                "title": "Lesson",
                "required": [
                  "situation",
                  "action",
                  "result",
                  "learning",
                  "generalized_code_example"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "title": "Action",
                    "description": "The action taken to address the challenge."
                  },
                  "result": {
                    "type": "string",
                    "title": "Result",
                    "description": "The result of the action taken."
                  },
                  "learning": {
                    "type": "string",
                    "title": "Learning",
                    "description": "What we have learned and want to remember."
                  },
                  "situation": {
                    "type": "string",
                    "title": "Situation",
                    "description": "The challenge faced during the implementation of the recommendation."
                  },
                  "generalized_code_example": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Generalized Code Example",
                    "description": "A generalized, and reusable, code example of the lesson learned."
                  }
                },
                "description": "Lessons learned from the implementation of the recommendation."
              },
              "Feedback": {
                "type": "object",
                "title": "Feedback",
                "required": ["rating", "comments"],
                "properties": {
                  "rating": {
                    "enum": [1, 2, 3, 4, 5],
                    "type": "integer",
                    "title": "Rating",
                    "description": "Rating of the recommendation, from 1 (poor) to 5 (excellent)."
                  },
                  "comments": {
                    "type": "string",
                    "title": "Comments",
                    "description": "Additional comments or suggestions for improvement."
                  }
                },
                "description": "Overall feedback on the recommendation provided by the system."
              },
              "CodeChanges": {
                "type": "object",
                "title": "CodeChanges",
                "properties": {
                  "number_of_files_edited": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Number Of Files Edited",
                    "default": null
                  },
                  "number_of_files_created": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Number Of Files Created",
                    "default": null
                  },
                  "number_of_files_deleted": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Number Of Files Deleted",
                    "default": null
                  },
                  "total_number_of_lines_added": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Total Number Of Lines Added",
                    "default": null
                  },
                  "total_number_of_lines_removed": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Total Number Of Lines Removed",
                    "default": null
                  }
                }
              },
              "FeedbackReport": {
                "type": "object",
                "title": "FeedbackReport",
                "required": ["lessons_learned", "recommendation_feedback", "source_feedbacks"],
                "properties": {
                  "lessons_learned": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/$defs/Lesson"
                        }
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Lessons Learned",
                    "description": "List of lessons learned from the implementation of the recommendation."
                  },
                  "source_feedbacks": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/$defs/SourceFeedback"
                        }
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Source Feedbacks",
                    "description": "List of feedbacks on the sources provided in the recommendation to share in anonymous form with the Ecosystems Owners."
                  },
                  "integration_metrics": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/IntegrationMetrics"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Metrics related to the integration of the recommendation into the project."
                  },
                  "recommendation_feedback": {
                    "$ref": "#/$defs/RecommendationFeedback",
                    "description": "Feedback on the recommendation quality and effectiveness."
                  }
                },
                "description": "Feedback on the recommendation provided by the system."
              },
              "SourceFeedback": {
                "type": "object",
                "title": "SourceFeedback",
                "required": ["source_url", "feedback"],
                "properties": {
                  "feedback": {
                    "$ref": "#/$defs/Feedback",
                    "description": "Feedback on the source."
                  },
                  "source_url": {
                    "type": "string",
                    "title": "Source Url",
                    "description": "URL of the source."
                  }
                },
                "description": "Feedback to pass to the ecosystem owners on the specific source documentation."
              },
              "SectionFeedback": {
                "type": "object",
                "title": "SectionFeedback",
                "required": ["section_id", "feedback"],
                "properties": {
                  "feedback": {
                    "$ref": "#/$defs/Feedback",
                    "description": "Feedback on the section."
                  },
                  "section_id": {
                    "type": "string",
                    "title": "Section Id",
                    "description": "Unique id of the section."
                  }
                },
                "description": "Feedback to pass to the recommender agent on a specific section of the recommendation."
              },
              "IntegrationMetrics": {
                "type": "object",
                "title": "IntegrationMetrics",
                "required": ["integration_time_seconds", "code_changes", "number_of_actions"],
                "properties": {
                  "code_changes": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/CodeChanges"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "description": "Metrics related to the code changes made during integration."
                  },
                  "number_of_actions": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Number Of Actions",
                    "description": "Number of actions taken during the integration process."
                  },
                  "integration_time_seconds": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Integration Time Seconds",
                    "description": "Time taken in seconds to integrate the recommendation into the project."
                  }
                }
              },
              "RecommendationFeedback": {
                "type": "object",
                "title": "RecommendationFeedback",
                "required": ["overall_feedback", "section_feedbacks"],
                "properties": {
                  "overall_feedback": {
                    "$ref": "#/$defs/Feedback",
                    "description": "Overall feedback on the recommendation."
                  },
                  "section_feedbacks": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/$defs/SectionFeedback"
                        }
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Section Feedbacks",
                    "description": "List of feedbacks on the specific sections of in the recommendation."
                  }
                },
                "description": "Feedback on the recommendation provided by the system."
              }
            },
            "title": "send_feedbackArguments",
            "required": ["session_id", "feedback"],
            "properties": {
              "feedback": {
                "$ref": "#/$defs/FeedbackReport"
              },
              "session_id": {
                "type": "string",
                "title": "Session Id"
              }
            }
          }
        },
        {
          "name": "ListMcpResourcesTool",
          "description": "\nList available resources from configured MCP servers.\nEach returned resource will include all standard MCP resource fields plus a 'server' field \nindicating which server the resource belongs to.\n\nParameters:\n- server (optional): The name of a specific MCP server to get resources from. If not provided,\n  resources from all servers will be returned.\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "server": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        {
          "name": "ReadMcpResourceTool",
          "description": "\nReads a specific resource from an MCP server, identified by server name and resource URI.\n\nParameters:\n- server (required): The name of the MCP server from which to read the resource\n- uri (required): The URI of the resource to read\n",
          "input_schema": {
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "required": ["server", "uri"],
            "properties": {
              "uri": {
                "type": "string"
              },
              "server": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      ],
      "stream": true,
      "system": [
        {
          "text": "You are Claude Code, Anthropic's official CLI for Claude.",
          "type": "text",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools).\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point. When you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface. You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail. Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n1. Doing the right thing when asked, including taking actions and follow-up actions\n2. Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n3. Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite and TodoRead tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nfalse\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /home/crystalin/projects/moonbeam\nIs directory a git repo: Yes\nAdditional working directories: /tmp\nPlatform: linux\nOS Version: Linux 5.15.167.4-microsoft-standard-WSL2\nToday's date: 2025-06-29\n</env>\nYou are powered by the model named Opus 4. The exact model ID is claude-opus-4-20250514.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: master\n\nMain branch (you will usually use this for PRs): master\n\nStatus:\n?? DEBUG.md\n?? LOGGING_TARGETS.md\n?? body.md\n?? jira-cleanup-tracker.md\n?? moonbeam\n?? moonbeam-replay-origin.sh\n?? moonbeam-replay-pov-fix.sh\n?? moonbeam-replay-pov.sh\n?? moonbeam-replay.sh\n?? moonbeam.sh\n?? moonriver-replay.sh\n?? test/configs/zombieAlphanet-44.1-3600.json\n?? test/moonbeam-32.1\n?? test/moonbeam-39\n?? test/moonbeam-44.1\n?? test/scripts/prepare-lazy-loading-new-runtime.ts\n?? test/suites/dev/moonbase/test-balance/test-erc20.ts\n?? test/suites/dev/moonbase/test-extrinsics/\n?? test/suites/lazy-loading/test-storage-override.ts\n?? test/suites/zombie/test_import.ts\n?? tools/test-scripts/test-xcm-recursive-limit.ts\n\nRecent commits:\nafc66a8bbd Re-enable lazy-loading tests (#3312)\ne1915d55b7 fix broken link (#3313)\nd823a7ca6f Add XCM v5 integration tests (#3311)\ne8737e2b81 state_traceBlock: replay the block with proof recording (#3308)\n4a6dd71268 CI: benchmarking improvement (#3310)",
          "type": "text",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ],
      "messages": [
        {
          "role": "user",
          "content": [
            {
              "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n",
              "type": "text"
            },
            {
              "text": "hi",
              "type": "text"
            },
            {
              "text": "<system-reminder>This is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.</system-reminder>",
              "type": "text"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "text": "Hello! I'm here to help you with software engineering tasks in your Moonbeam project. What would you like to work on today?",
              "type": "text",
              "cache_control": {
                "type": "ephemeral"
              }
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "text": "ho",
              "type": "text",
              "cache_control": {
                "type": "ephemeral"
              }
            }
          ]
        }
      ],
      "metadata": {
        "user_id": "claude-1"
      },
      "max_tokens": 32000,
      "temperature": 1
    }
  }
}
