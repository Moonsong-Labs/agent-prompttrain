// Minimal interfaces to avoid circular dependencies while providing type hints
interface MinimalCredential {
  type: 'api_key' | 'oauth'
  accountId?: string
  api_key?: string
  oauth?: {
    accessToken: string
    refreshToken: string
    expiresAt: number
    scopes: string[]
    isMax: boolean
  }
  slack?: Record<string, any>
  client_api_key?: string
}

interface MinimalPool {
  query: (...args: any[]) => Promise<any>
  connect: () => Promise<any>
  end: () => Promise<void>
}

/**
 * Typed context variables for Hono framework
 *
 * These variables are available throughout the request lifecycle in Hono middleware
 * and handlers. They ensure type safety when using `c.get()` and `c.set()` methods.
 *
 * @example
 * ```typescript
 * // In middleware
 * c.set('requestId', generateId())
 * c.set('domain', extractDomain(req))
 *
 * // In handler
 * const domain = c.get('domain')
 * const pool = c.get('pool')
 * ```
 */
export type HonoVariables = {
  /**
   * Unique identifier for the current request
   * Generated in request middleware for tracing and logging
   */
  requestId: string

  // Authentication
  /**
   * API key used for authentication (if using API key auth)
   */
  apiKey?: string

  /**
   * Team identifier associated with the API key
   */
  teamId?: string

  /**
   * Full credential object containing OAuth or API key details
   * @see ClaudeCredentials in proxy service for full type
   */
  credential?: MinimalCredential

  // Request/Response data
  /**
   * Validated and parsed request body
   * @see ClaudeMessagesRequest for the expected shape
   */
  validatedBody?: any

  // Metrics
  /**
   * Number of input tokens consumed by the request
   */
  inputTokens?: number

  /**
   * Number of output tokens generated by the response
   */
  outputTokens?: number

  /**
   * Request start timestamp for performance monitoring
   */
  startTime?: number

  /**
   * Array of async tasks to execute after response is sent
   * Used for non-blocking operations like logging or notifications
   */
  postRequestTasks?: (() => Promise<void>)[]

  // Request metadata
  /**
   * Domain extracted from the request (e.g., 'example.com')
   * Used for multi-tenant credential resolution
   */
  domain?: string

  /**
   * Type of Claude API request being made
   */
  requestType?: 'query_evaluation' | 'inference'

  /**
   * Model name from the request (e.g., 'claude-3-opus-20240229')
   */
  model?: string

  /**
   * PostgreSQL connection pool instance
   * @see pg.Pool from 'pg' package for full type
   */
  pool?: MinimalPool
}

/**
 * Typed bindings for edge runtime environments
 *
 * These bindings provide access to environment variables and platform-specific
 * features when running in edge environments like Cloudflare Workers.
 *
 * @example
 * ```typescript
 * // Access environment variables
 * const dbUrl = c.env.DATABASE_URL
 *
 * // Access Cloudflare KV (if deployed to Workers)
 * const value = await c.env.KV?.get('key')
 * ```
 */
export type HonoBindings = {
  // Environment variables
  /**
   * PostgreSQL connection string
   * @example 'postgresql://user:pass@localhost:5432/dbname'
   */
  DATABASE_URL?: string

  /**
   * Slack webhook URL for notifications
   */
  SLACK_WEBHOOK_URL?: string

  /**
   * Debug mode flag ('true' enables verbose logging)
   */
  DEBUG?: string

  // Cloudflare bindings (if deployed to Workers)
  /**
   * Cloudflare KV namespace binding
   * Only available when deployed to Cloudflare Workers
   */
  KV?: any

  /**
   * Cloudflare Durable Objects namespace binding
   * Only available when deployed to Cloudflare Workers
   */
  DO?: any

  /**
   * Cloudflare Queue binding
   * Only available when deployed to Cloudflare Workers
   */
  QUEUE?: any
}
