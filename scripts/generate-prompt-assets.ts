#!/usr/bin/env bun

/**
 * Generates prompt-assets.ts from the markdown and JSON files
 * This ensures prompt templates are embedded in the build rather than loaded at runtime
 */

import { readFileSync, writeFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'
import { z } from 'zod'
import type { ConversationAnalysis } from '../packages/shared/src/types/ai-analysis.js'
import type { Message } from '../packages/shared/src/prompts/truncation.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Base paths for better organization
const PROJECT_ROOT = join(__dirname, '..')
const SHARED_PACKAGE = join(PROJECT_ROOT, 'packages', 'shared')
const PROMPTS_DIR = join(SHARED_PACKAGE, 'src', 'prompts', 'analysis')
const OUTPUT_FILE = join(PROMPTS_DIR, 'prompt-assets.ts')

// Validation schemas
const AnalysisExampleSchema = z.object({
  transcript: z.array(
    z.object({
      role: z.enum(['user', 'assistant']),
      content: z.string(),
    })
  ),
  expectedOutput: z.any(), // Will be validated against ConversationAnalysisSchema at runtime
})

const ExamplesSchema = z.array(AnalysisExampleSchema)

// Type definitions - these will be imported in the generated file
interface AnalysisExample {
  transcript: Message[]
  expectedOutput: ConversationAnalysis
}

interface PromptAssets {
  systemPrompt: string
  examples: AnalysisExample[]
}

/**
 * Escapes a string for safe inclusion in a template literal
 * @param str - The string to escape
 * @returns The escaped string safe for template literal inclusion
 */
function escapeForTemplate(str: string): string {
  // Escape in order: backslashes first, then backticks, then dollar signs
  return str
    .replace(/\\/g, '\\\\') // Escape backslashes
    .replace(/`/g, '\\`') // Escape backticks
    .replace(/\$/g, '\\$') // Escape dollar signs to prevent interpolation
}

/**
 * Main function to generate prompt assets from source files
 * Reads markdown and JSON files and generates a TypeScript module
 */
function generatePromptAssets(): void {
  console.log('Generating prompt assets...')

  const versions = ['v1'] // Add more versions as needed
  const assets: Record<string, PromptAssets> = {}

  for (const version of versions) {
    const versionDir = join(PROMPTS_DIR, version)

    try {
      // Read system prompt
      const systemPrompt = readFileSync(join(versionDir, 'system-prompt.md'), 'utf-8')

      // Read and validate examples
      const examplesJson = readFileSync(join(versionDir, 'examples.json'), 'utf-8')
      const examplesData = JSON.parse(examplesJson)

      // Validate the structure of examples
      const examples = ExamplesSchema.parse(examplesData)

      assets[version] = {
        systemPrompt,
        examples,
      }

      console.log(`Loaded assets for version: ${version}`)
    } catch (error) {
      if (error instanceof z.ZodError) {
        console.error(`Invalid examples.json structure for version ${version}:`, error.errors)
        throw new Error(`Failed to validate examples for version ${version}`)
      }
      console.error(`Failed to load assets for version ${version}:`, error)
      throw error
    }
  }

  // Generate TypeScript file with prominent warning
  let content = `/******************************************************************************
 * THIS FILE IS AUTO-GENERATED - DO NOT EDIT!
 * 
 * @file Embedded prompt assets for AI conversation analysis
 * @generated by scripts/generate-prompt-assets.ts
 * 
 * This file is generated during build to avoid runtime filesystem access.
 * Any manual changes will be lost on the next build.
 * 
 * To make changes:
 * 1. Edit the source files in 'packages/shared/src/prompts/analysis/v1/'
 * 2. Run 'bun run scripts/generate-prompt-assets.ts' to regenerate
 * 
 * Generated on: ${new Date().toISOString()}
 *****************************************************************************/

import type { Message } from '../truncation.js'
import type { ConversationAnalysis } from '../../types/ai-analysis.js'

/**
 * Structure for analysis examples used in prompts
 */
export interface AnalysisExample {
  /** The conversation transcript to analyze */
  transcript: Message[]
  /** The expected analysis output for this conversation */
  expectedOutput: ConversationAnalysis
}

/**
 * Structure for prompt assets
 */
export interface PromptAssets {
  /** The system prompt template with placeholders */
  systemPrompt: string
  /** Example conversations with expected analysis outputs */
  examples: AnalysisExample[]
}

/**
 * Embedded prompt assets for AI conversation analysis
 * Organized by version (currently only 'v1' is available)
 */
export const PROMPT_ASSETS: Record<string, PromptAssets> = {\n`

  for (const [version, data] of Object.entries(assets)) {
    content += `  ${version}: {\n`
    content += `    systemPrompt: \`${escapeForTemplate(data.systemPrompt)}\`,\n`
    content += `    examples: ${JSON.stringify(data.examples, null, 6)
      .split('\n')
      .map((line, i) => (i === 0 ? line : '    ' + line))
      .join('\n')}\n`
    content += `  },\n`
  }

  content = content.slice(0, -2) + '\n}\n'

  writeFileSync(OUTPUT_FILE, content)
  console.log(`Generated ${OUTPUT_FILE}`)
}

// Run the generation
try {
  generatePromptAssets()
} catch (error) {
  console.error('Failed to generate prompt assets:', error)
  process.exit(1)
}
