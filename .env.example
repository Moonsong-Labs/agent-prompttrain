# Agent Prompt Train Configuration Example
# Copy this file to .env and update with your values

# ===================
# Required Settings
# ===================

# PostgreSQL connection string
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/agent_prompttrain

# Dashboard authentication key (generate with: openssl rand -base64 32)
# ⚠️ CRITICAL: Without this, dashboard runs WITHOUT authentication, exposing ALL data!
# NEVER leave this unset in production!
DASHBOARD_API_KEY=your-secure-dashboard-key-here

# Enable Google SSO via OAuth2 Proxy (optional)
DASHBOARD_SSO_ENABLED=false
DASHBOARD_SSO_HEADERS=X-Auth-Request-Email
DASHBOARD_SSO_ALLOWED_DOMAINS=
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
# Generate 32 byte base64 string: `openssl rand -base64 32`
OAUTH_PROXY_COOKIE_SECRET=

# ===================
# Claude API Settings
# ===================

# API keys are managed through credential files in the credentials/ directory
# See credentials/README.md for setup instructions

# Directory for domain credential files (default: ./credentials)
CREDENTIALS_DIR=./credentials

# ===================
# Credential Management (ADR-026)
# ===================

# Enable database-backed credential storage (default: false)
# false = Use filesystem credentials (safe default)
# true = Use PostgreSQL database for credentials
# Note: Database credentials are stored in plaintext. Ensure proper database security.
USE_DATABASE_CREDENTIALS=false

# Wildcard credential support (default: false)
# true = Enable wildcard matching, false = Disable, shadow = Log only (no behavior change)
# When enabled, _wildcard.example.com.credentials.json matches all subdomains of example.com
CNP_WILDCARD_CREDENTIALS=false

# TTL for credential resolution cache in milliseconds (default: 300000 = 5 minutes)
# Caches both successful and failed credential lookups for performance
CNP_RESOLUTION_CACHE_TTL=300000

# Enable debug logging for credential resolution (default: false)
# Logs detailed information about domain matching and wildcard resolution
CNP_DEBUG_RESOLUTION=false

# ===================
# Service Configuration
# ===================

# Proxy service
HOST=0.0.0.0

# Dashboard service
DASHBOARD_PORT=3001
DASHBOARD_HOST=0.0.0.0

# ===================
# Feature Flags
# ===================

# Enable request/response storage (default: false)
STORAGE_ENABLED=true

# Enable debug logging - masks sensitive data (default: false)
DEBUG=false

# Enable SQL query logging (default: false)
# Shows all SQL queries in debug logs when running the application
DEBUG_SQL=false

# Require client authentication (default: true)
# Set to false for easier testing with Claude Code
ENABLE_CLIENT_AUTH=false

# ===================
# Performance Tuning
# ===================

# Dashboard cache TTL in seconds, 0 to disable (default: 30)
DASHBOARD_CACHE_TTL=30

# Log queries slower than this threshold in ms (default: 5000)
SLOW_QUERY_THRESHOLD_MS=5000

# ===================
# Monitoring & Alerts
# ===================

# Slack webhook for notifications
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL
SLACK_CHANNEL=#alerts
SLACK_USERNAME="PromptTrain"
SLACK_ICON_EMOJI=:robot_face:
SLACK_ENABLED=false

# Telemetry endpoint (optional)
TELEMETRY_ENDPOINT=

# ===================
# MCP (Model Context Protocol) Settings
# ===================

# Enable MCP server (default: false)
MCP_ENABLED=false

# Local prompts directory (default: ./prompts)
# Store your prompt YAML files in this directory
MCP_PROMPTS_DIR=./prompts

# Watch for file changes and hot-reload (default: true)
# Useful for development - automatically reloads prompts when files change
MCP_WATCH_FILES=true

# Cache settings
MCP_CACHE_TTL=300        # Cache TTL in seconds (not currently used with file-based system)
MCP_CACHE_SIZE=1000      # Max prompts in memory cache

# ===================
# Optional: GitHub Sync Configuration
# ===================
# Enable GitHub sync to fetch prompts from a repository
# When configured, prompts will be synced from GitHub and written to MCP_PROMPTS_DIR

# GitHub repository owner (user or organization)
# MCP_GITHUB_OWNER=your-org

# GitHub repository name
# MCP_GITHUB_REPO=prompt-library

# Branch to sync from (default: main)
# MCP_GITHUB_BRANCH=main

# GitHub personal access token with repo read permissions
# MCP_GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxx

# Path within the repository containing prompt files (default: prompts/)
# MCP_GITHUB_PATH=prompts/

# Sync interval in seconds (default: 300 / 5 minutes)
# MCP_SYNC_INTERVAL=300

# ===================
# Development Settings
# ===================

# Collect request samples for testing (default: false)
COLLECT_TEST_SAMPLES=false

# Directory for test samples (default: test-samples)
TEST_SAMPLES_DIR=test-samples

# Proxy API URL for dashboard (default: http://localhost:3000)
PROXY_API_URL=http://localhost:3000

# ===================
# AI Analysis Configuration
# ===================

# Background Worker Settings
AI_WORKER_ENABLED=false
AI_WORKER_POLL_INTERVAL_MS=5000
AI_WORKER_MAX_CONCURRENT_JOBS=3
AI_WORKER_JOB_TIMEOUT_MINUTES=5
AI_ANALYSIS_MAX_RETRIES=3
AI_ANALYSIS_GEMINI_REQUEST_TIMEOUT_MS=60000

# Gemini API Configuration
GEMINI_API_KEY=your-gemini-api-key-here
GEMINI_API_URL=https://generativelanguage.googleapis.com/v1beta/models
GEMINI_MODEL_NAME=gemini-2.0-flash-exp

# Analysis Token Limits
AI_ANALYSIS_INPUT_TRUNCATION_TARGET_TOKENS=8192
AI_ANALYSIS_TRUNCATE_FIRST_N_TOKENS=1000
AI_ANALYSIS_TRUNCATE_LAST_M_TOKENS=4000
