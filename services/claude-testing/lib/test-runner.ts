import { Anthropic } from '@anthropic-ai/sdk';
import { z } from 'zod';
import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';

// Schema for test cases generated by Claude
export const TestCaseSchema = z.object({
  description: z.string(),
  httpMethod: z.enum(['GET', 'POST', 'PUT', 'DELETE', 'PATCH']),
  endpoint: z.string(),
  headers: z.record(z.string()).optional(),
  payload: z.any().optional(),
  expectedStatusCode: z.number(),
  expectedResponseSchema: z.any().optional(),
});

export type TestCase = z.infer<typeof TestCaseSchema>;

interface GeneratedTestSuite {
  id: string;
  timestamp: string;
  prompt: string;
  testCases: TestCase[];
}

export class AITestRunner {
  private anthropic: Anthropic;
  private artifactsDir: string;
  private mode: 'generate' | 'replay';

  constructor() {
    this.artifactsDir = path.join(process.cwd(), 'artifacts');
    this.mode = (process.env.TEST_MODE as 'generate' | 'replay') || 'generate';
  }

  async initialize() {
    // Read API key from Docker secret or environment
    const apiKeyFile = process.env.ANTHROPIC_API_KEY_FILE;
    let apiKey = process.env.ANTHROPIC_API_KEY;
    
    if (apiKeyFile) {
      try {
        apiKey = (await fs.readFile(apiKeyFile, 'utf-8')).trim();
      } catch (error) {
        console.error('Failed to read API key file:', error);
      }
    }

    if (!apiKey) {
      throw new Error('Anthropic API key not found');
    }

    this.anthropic = new Anthropic({ apiKey });
  }

  async generateTestCases(prompt: string, temperature = 0.1): Promise<TestCase[]> {
    if (!this.anthropic) {
      throw new Error('AITestRunner not initialized. Call initialize() first.');
    }
    const systemPrompt = `You are a meticulous QA automation engineer testing a Claude API proxy service.
Your task is to generate test cases as a JSON array. Each test case MUST conform to this TypeScript interface:

interface TestCase {
  description: string;
  httpMethod: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  endpoint: string;
  headers?: Record<string, string>;
  payload?: any;
  expectedStatusCode: number;
  expectedResponseSchema?: any; // JSON Schema for response validation
}

Generate comprehensive test cases that cover:
- Valid requests
- Invalid requests (missing fields, wrong types)
- Edge cases
- Security concerns
- Performance considerations

Return ONLY a valid JSON array of test cases, no other text.`;

    const response = await this.anthropic.messages.create({
      model: 'claude-3-opus-20240229',
      max_tokens: 4000,
      temperature,
      system: systemPrompt,
      messages: [{ role: 'user', content: prompt }],
    });

    const content = response.content[0];
    if (content.type !== 'text') {
      throw new Error('Unexpected response type from Claude');
    }

    // Parse and validate the generated test cases
    const testCases = JSON.parse(content.text);
    return testCases.map((tc: any) => TestCaseSchema.parse(tc));
  }

  async saveTestSuite(prompt: string, testCases: TestCase[]): Promise<string> {
    const suiteId = crypto.randomBytes(8).toString('hex');
    const suite: GeneratedTestSuite = {
      id: suiteId,
      timestamp: new Date().toISOString(),
      prompt,
      testCases,
    };

    const filename = `generated-tests-${suiteId}.json`;
    const filepath = path.join(this.artifactsDir, filename);
    
    await fs.mkdir(this.artifactsDir, { recursive: true });
    await fs.writeFile(filepath, JSON.stringify(suite, null, 2));
    
    return suiteId;
  }

  async loadTestSuite(suiteId: string): Promise<GeneratedTestSuite> {
    const filename = `generated-tests-${suiteId}.json`;
    const filepath = path.join(this.artifactsDir, filename);
    
    const content = await fs.readFile(filepath, 'utf-8');
    return JSON.parse(content);
  }

  async getTestCases(prompt: string): Promise<{ testCases: TestCase[]; suiteId: string }> {
    if (this.mode === 'replay') {
      const replayId = process.env.REPLAY_SUITE_ID;
      if (!replayId) {
        throw new Error('REPLAY_SUITE_ID must be set in replay mode');
      }
      const suite = await this.loadTestSuite(replayId);
      return { testCases: suite.testCases, suiteId: suite.id };
    }

    // Generate mode
    const testCases = await this.generateTestCases(prompt);
    const suiteId = await this.saveTestSuite(prompt, testCases);
    return { testCases, suiteId };
  }
}