# Production-optimized multi-stage Dockerfile
FROM node:20-alpine AS base

# Install dependencies needed for building
RUN apk add --no-cache libc6-compat python3 make g++
WORKDIR /app

# Dependencies stage - cache npm dependencies
FROM base AS deps
COPY package*.json ./
RUN npm ci --only=production && \
    npm cache clean --force

# Build stage
FROM base AS builder
COPY package*.json ./
RUN npm ci
COPY . .
# Compile TypeScript
RUN npm run build:typescript || echo "No TypeScript build script"

# Runtime stage
FROM node:20-alpine AS runtime
RUN apk add --no-cache wget curl tini

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy production dependencies
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --chown=nodejs:nodejs package*.json ./

# Copy client setup files if they exist
COPY --chown=nodejs:nodejs client-setup/ ./client-setup/ 2>/dev/null || true

# Set production environment
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=512" \
    PORT=3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:${PORT}/health/live || exit 1

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "dist/server.js"]

# Alternative Bun-based production build
FROM oven/bun:1-alpine AS bun-builder
WORKDIR /app
COPY package.json bun.lockb ./
RUN bun install --frozen-lockfile --production

COPY . .
RUN bun build ./src/server.ts --outfile=./server.js --target=bun

FROM oven/bun:1-alpine AS bun-runtime
RUN apk add --no-cache tini

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy built application
COPY --from=bun-builder --chown=nodejs:nodejs /app/server.js ./
COPY --from=bun-builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --chown=nodejs:nodejs client-setup/ ./client-setup/ 2>/dev/null || true

# Set production environment
ENV NODE_ENV=production \
    PORT=3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:${PORT}/health/live || exit 1

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["bun", "run", "server.js"]